<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>Eigen2ToEigen3</name>
    <title>Porting from Eigen2 to Eigen3</title>
    <filename>Eigen2ToEigen3</filename>
    <docanchor file="Eigen2ToEigen3">Using</docanchor>
    <docanchor file="Eigen2ToEigen3">AlignedMap</docanchor>
    <docanchor file="Eigen2ToEigen3">LazyVsNoalias</docanchor>
    <docanchor file="Eigen2ToEigen3">LinearSolvers</docanchor>
    <docanchor file="Eigen2ToEigen3">StdContainers</docanchor>
    <docanchor file="Eigen2ToEigen3">ComplexDot</docanchor>
    <docanchor file="Eigen2ToEigen3">AlignMacros</docanchor>
    <docanchor file="Eigen2ToEigen3">PartAndExtract</docanchor>
    <docanchor file="Eigen2ToEigen3">Transform</docanchor>
    <docanchor file="Eigen2ToEigen3">Decompositions</docanchor>
    <docanchor file="Eigen2ToEigen3">Corners</docanchor>
    <docanchor file="Eigen2ToEigen3">eiPrefix</docanchor>
    <docanchor file="Eigen2ToEigen3">VectorBlocks</docanchor>
    <docanchor file="Eigen2ToEigen3">CompatibilitySupport</docanchor>
    <docanchor file="Eigen2ToEigen3">TriangularSolveInPlace</docanchor>
    <docanchor file="Eigen2ToEigen3">CoefficientWiseOperations</docanchor>
    <docanchor file="Eigen2ToEigen3">GeometryModule</docanchor>
  </compound>
  <compound kind="page">
    <name>Eigen2SupportModes</name>
    <title>Eigen 2 support modes</title>
    <filename>Eigen2SupportModes</filename>
    <docanchor file="Eigen2SupportModes">Stage40</docanchor>
    <docanchor file="Eigen2SupportModes">FinallyDropAllEigen2Support</docanchor>
    <docanchor file="Eigen2SupportModes">Stage10</docanchor>
    <docanchor file="Eigen2SupportModes">Stage20</docanchor>
    <docanchor file="Eigen2SupportModes">StagedMigrationPathOverview</docanchor>
    <docanchor file="Eigen2SupportModes">EIGEN2_SUPPORT_Macro</docanchor>
    <docanchor file="Eigen2SupportModes">ABICompatibility</docanchor>
    <docanchor file="Eigen2SupportModes">Stage30</docanchor>
  </compound>
  <compound kind="page">
    <name>Experimental</name>
    <title>Experimental parts of Eigen</title>
    <filename>Experimental</filename>
    <docanchor file="Experimental">summary</docanchor>
    <docanchor file="Experimental">modules</docanchor>
    <docanchor file="Experimental">core</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicClassHierarchy</name>
    <title>The class hierarchy</title>
    <filename>TopicClassHierarchy</filename>
    <docanchor file="TopicClassHierarchy">TopicClassHierarchyPrinciples</docanchor>
    <docanchor file="TopicClassHierarchy">TopicClassHierarchyBaseClasses</docanchor>
    <docanchor file="TopicClassHierarchy">TopicClassHierarchyCoreClasses</docanchor>
    <docanchor file="TopicClassHierarchy">TopicClassHierarchyInheritanceDiagrams</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizingEigen</name>
    <title>Customizing/Extending Eigen</title>
    <filename>TopicCustomizingEigen</filename>
    <docanchor file="TopicCustomizingEigen">InheritingFromMatrix</docanchor>
    <docanchor file="TopicCustomizingEigen">CustomScalarType</docanchor>
    <docanchor file="TopicCustomizingEigen">ExtendingMatrixBase</docanchor>
    <docanchor file="TopicCustomizingEigen">user_defined_scalars</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicFunctionTakingEigenTypes</name>
    <title>Writing Functions Taking %Eigen Types as Parameters</title>
    <filename>TopicFunctionTakingEigenTypes</filename>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicUsingRefClass</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicPlainFunctionsWorking</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicResizingInGenericImplementations</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicFirstExamples</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicPlainFunctionsFailing</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes">TopicSummary</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicWritingEfficientProductExpression</name>
    <title>Writing efficient matrix product expressions</title>
    <filename>TopicWritingEfficientProductExpression</filename>
    <docanchor file="TopicWritingEfficientProductExpression">GEMM_Limitations</docanchor>
    <docanchor file="TopicWritingEfficientProductExpression">GEMM</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicInsideEigenExample</name>
    <title>What happens inside Eigen, on a simple example</title>
    <filename>TopicInsideEigenExample</filename>
    <docanchor file="TopicInsideEigenExample">Assignment</docanchor>
    <docanchor file="TopicInsideEigenExample">ConstructingVectors</docanchor>
    <docanchor file="TopicInsideEigenExample">WhyInteresting</docanchor>
    <docanchor file="TopicInsideEigenExample">ConstructionOfSumXpr</docanchor>
  </compound>
  <compound kind="page">
    <name>UserManual_Generalities</name>
    <title>General topics</title>
    <filename>UserManual_Generalities</filename>
  </compound>
  <compound kind="page">
    <name>UserManual_UnderstandingEigen</name>
    <title>Understanding Eigen</title>
    <filename>UserManual_UnderstandingEigen</filename>
  </compound>
  <compound kind="page">
    <name>UnclassifiedPages</name>
    <title>Unclassified pages</title>
    <filename>UnclassifiedPages</filename>
  </compound>
  <compound kind="page">
    <name>TopicPreprocessorDirectives</name>
    <title>Preprocessor directives</title>
    <filename>TopicPreprocessorDirectives</filename>
    <docanchor file="TopicPreprocessorDirectives">TopicPreprocessorDirectivesPerformance</docanchor>
    <docanchor file="TopicPreprocessorDirectives">TopicPreprocessorDirectivesDevelopers</docanchor>
    <docanchor file="TopicPreprocessorDirectives">TopicPreprocessorDirectivesPlugins</docanchor>
    <docanchor file="TopicPreprocessorDirectives">TopicPreprocessorDirectivesAssertions</docanchor>
    <docanchor file="TopicPreprocessorDirectives">TopicPreprocessorDirectivesMajor</docanchor>
  </compound>
  <compound kind="page">
    <name>GettingStarted</name>
    <title>Getting started</title>
    <filename>GettingStarted</filename>
    <docanchor file="GettingStarted">GettingStartedExplanation</docanchor>
    <docanchor file="GettingStarted">GettingStartedCompiling</docanchor>
    <docanchor file="GettingStarted">GettingStartedInstallation</docanchor>
    <docanchor file="GettingStarted">GettingStartedExample2</docanchor>
    <docanchor file="GettingStarted">GettingStartedFirstProgram</docanchor>
    <docanchor file="GettingStarted">GettingStartedConclusion</docanchor>
    <docanchor file="GettingStarted">GettingStartedExplanation2</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicTemplateKeyword</name>
    <title>The template and typename keywords in C++</title>
    <filename>TopicTemplateKeyword</filename>
    <docanchor file="TopicTemplateKeyword">TopicTemplateKeywordResources</docanchor>
    <docanchor file="TopicTemplateKeyword">TopicTemplateKeywordExample</docanchor>
    <docanchor file="TopicTemplateKeyword">TopicTemplateKeywordExplanation</docanchor>
    <docanchor file="TopicTemplateKeyword">TopicTemplateKeywordToDefineTemplates</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicAssertions</name>
    <title>Assertions</title>
    <filename>TopicAssertions</filename>
    <docanchor file="TopicAssertions">RedefineAssert</docanchor>
    <docanchor file="TopicAssertions">DerivedStaticAssert</docanchor>
    <docanchor file="TopicAssertions">StaticAssert</docanchor>
    <docanchor file="TopicAssertions">PlainAssert</docanchor>
    <docanchor file="TopicAssertions">DisableStaticAssert</docanchor>
    <docanchor file="TopicAssertions">DisableAssert</docanchor>
    <docanchor file="TopicAssertions">PermissiveAssertions</docanchor>
    <docanchor file="TopicAssertions">StrictAssertions</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicEigenExpressionTemplates</name>
    <title>Expression templates in Eigen</title>
    <filename>TopicEigenExpressionTemplates</filename>
  </compound>
  <compound kind="page">
    <name>TopicLazyEvaluation</name>
    <title>Lazy Evaluation and Aliasing</title>
    <filename>TopicLazyEvaluation</filename>
  </compound>
  <compound kind="page">
    <name>TopicMultiThreading</name>
    <title>Eigen and multi-threading</title>
    <filename>TopicMultiThreading</filename>
    <docanchor file="TopicMultiThreading">TopicMultiThreading_MakingEigenMT</docanchor>
    <docanchor file="TopicMultiThreading">TopicMultiThreading_UsingEigenWithMT</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicResizing</name>
    <title>Resizing</title>
    <filename>TopicResizing</filename>
  </compound>
  <compound kind="page">
    <name>TopicScalarTypes</name>
    <title>Scalar types</title>
    <filename>TopicScalarTypes</filename>
  </compound>
  <compound kind="page">
    <name>TopicVectorization</name>
    <title>Vectorization</title>
    <filename>TopicVectorization</filename>
  </compound>
  <compound kind="page">
    <name>TutorialSparse_example_details</name>
    <title></title>
    <filename>TutorialSparse_example_details</filename>
  </compound>
  <compound kind="page">
    <name>TopicUsingIntelMKL</name>
    <title>Using IntelÂ® Math Kernel Library from Eigen</title>
    <filename>TopicUsingIntelMKL</filename>
    <docanchor file="TopicUsingIntelMKL">TopicUsingIntelMKL_Links</docanchor>
    <docanchor file="TopicUsingIntelMKL">TopicUsingIntelMKL_Intro</docanchor>
    <docanchor file="TopicUsingIntelMKL">TopicUsingIntelMKL_SupportedFeatures</docanchor>
  </compound>
  <compound kind="group">
    <name>Cholesky_Module</name>
    <title>Cholesky module</title>
    <filename>group__Cholesky__Module.html</filename>
    <class kind="class">Eigen::LDLT</class>
    <class kind="class">Eigen::LLT</class>
  </compound>
  <compound kind="group">
    <name>CholmodSupport_Module</name>
    <title>CholmodSupport module</title>
    <filename>group__CholmodSupport__Module.html</filename>
    <class kind="class">Eigen::CholmodBase</class>
    <class kind="class">Eigen::CholmodDecomposition</class>
    <class kind="class">Eigen::CholmodSimplicialLDLT</class>
    <class kind="class">Eigen::CholmodSimplicialLLT</class>
    <class kind="class">Eigen::CholmodSupernodalLLT</class>
  </compound>
  <compound kind="group">
    <name>Core_Module</name>
    <title>Core module</title>
    <filename>group__Core__Module.html</filename>
    <subgroup>arraytypedefs</subgroup>
    <subgroup>matrixtypedefs</subgroup>
    <subgroup>flags</subgroup>
    <subgroup>enums</subgroup>
    <class kind="class">Eigen::aligned_allocator</class>
    <class kind="class">Eigen::Array</class>
    <class kind="class">Eigen::ArrayBase</class>
    <class kind="class">Eigen::ArrayWrapper</class>
    <class kind="class">Eigen::Block</class>
    <class kind="class">Eigen::CommaInitializer</class>
    <class kind="class">Eigen::CwiseBinaryOp</class>
    <class kind="class">Eigen::CwiseNullaryOp</class>
    <class kind="class">Eigen::CwiseUnaryOp</class>
    <class kind="class">Eigen::CwiseUnaryView</class>
    <class kind="class">Eigen::DenseBase</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Diagonal</class>
    <class kind="class">Eigen::DiagonalMatrix</class>
    <class kind="class">Eigen::DiagonalWrapper</class>
    <class kind="class">Eigen::ForceAlignedAccess</class>
    <class kind="class">GeneralProduct</class>
    <class kind="class">Eigen::IOFormat</class>
    <class kind="class">Eigen::Map</class>
    <class kind="class">MapBase</class>
    <class kind="class">Eigen::Matrix</class>
    <class kind="class">Eigen::MatrixBase</class>
    <class kind="class">Eigen::MatrixWrapper</class>
    <class kind="class">Eigen::NestByValue</class>
    <class kind="class">Eigen::NoAlias</class>
    <class kind="class">Eigen::NumTraits</class>
    <class kind="class">Eigen::PartialReduxExpr</class>
    <class kind="class">Eigen::PermutationBase</class>
    <class kind="class">Eigen::PermutationMatrix</class>
    <class kind="class">Eigen::PermutationWrapper</class>
    <class kind="class">Eigen::ProductReturnType</class>
    <class kind="class">Eigen::Ref</class>
    <class kind="class">Eigen::Replicate</class>
    <class kind="class">Eigen::Reverse</class>
    <class kind="class">Eigen::Select</class>
    <class kind="class">Eigen::SelfAdjointView</class>
    <class kind="class">Eigen::Stride</class>
    <class kind="class">Eigen::Transpose</class>
    <class kind="class">Eigen::Transpositions</class>
    <class kind="class">Eigen::TriangularView</class>
    <class kind="class">Eigen::VectorBlock</class>
    <class kind="class">Eigen::VectorwiseOp</class>
    <class kind="class">Eigen::WithFormat</class>
  </compound>
  <compound kind="group">
    <name>Eigenvalues_Module</name>
    <title>Eigenvalues module</title>
    <filename>group__Eigenvalues__Module.html</filename>
    <class kind="class">Eigen::ComplexEigenSolver</class>
    <class kind="class">Eigen::ComplexSchur</class>
    <class kind="class">Eigen::EigenSolver</class>
    <class kind="class">Eigen::GeneralizedEigenSolver</class>
    <class kind="class">Eigen::GeneralizedSelfAdjointEigenSolver</class>
    <class kind="class">Eigen::HessenbergDecomposition</class>
    <class kind="class">Eigen::RealQZ</class>
    <class kind="class">Eigen::RealSchur</class>
    <class kind="class">Eigen::SelfAdjointEigenSolver</class>
    <class kind="class">Eigen::Tridiagonalization</class>
  </compound>
  <compound kind="group">
    <name>Geometry_Module</name>
    <title>Geometry module</title>
    <filename>group__Geometry__Module.html</filename>
    <subgroup>alignedboxtypedefs</subgroup>
    <class kind="class">Eigen::AlignedBox</class>
    <class kind="class">Eigen::AngleAxis</class>
    <class kind="class">Eigen::Homogeneous</class>
    <class kind="class">Eigen::Hyperplane</class>
    <class kind="class">Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::ParametrizedLine</class>
    <class kind="class">Eigen::Quaternion</class>
    <class kind="class">Eigen::QuaternionBase</class>
    <class kind="class">Eigen::Rotation2D</class>
    <class kind="class">Scaling</class>
    <class kind="class">Eigen::Transform</class>
    <class kind="class">Eigen::Translation</class>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Affine &gt;</type>
      <name>Affine2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaac62cb423a4af85793c656a9848282a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Affine &gt;</type>
      <name>Affine2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaaacee014168e2286115b9acd93de9c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Affine &gt;</type>
      <name>Affine3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga1cee3e45cad60050d3c94cf603e2ff45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Affine &gt;</type>
      <name>Affine3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaca1e57a15de08fe20c934c5600f19314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, AffineCompact &gt;</type>
      <name>AffineCompact2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa44476c8fb0e300b47e21111db7f8224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, AffineCompact &gt;</type>
      <name>AffineCompact2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga2ffd4a2121dd59a3955735299e5e6364</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, AffineCompact &gt;</type>
      <name>AffineCompact3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga40d0ecae258b06c9633323da78162515</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, AffineCompact &gt;</type>
      <name>AffineCompact3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga1c999eef555fe940f147f3e8d18be6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 2 &gt;</type>
      <name>AlignedScaling2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaae4796ca310c4b5b0d857333a3c99afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 2 &gt;</type>
      <name>AlignedScaling2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga2d228eea1fcc6870e75d608ef2aa9565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 3 &gt;</type>
      <name>AlignedScaling3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabe609cfffef979a1b2ab553486b9f48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 3 &gt;</type>
      <name>AlignedScaling3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga462a06cebdc958f79cf7b50df07461ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; double &gt;</type>
      <name>AngleAxisd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0db1cc067c51aaa6dedf5805ee0c53d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; float &gt;</type>
      <name>AngleAxisf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga811d6fdab2002723bc7a72f055ce8c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Isometry &gt;</type>
      <name>Isometry2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga3802603a0c0017d3bc38e1c2483bc0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Isometry &gt;</type>
      <name>Isometry2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga4ee356e527fdc5aa9b048542ff6d4278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Isometry &gt;</type>
      <name>Isometry3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf6a2d462b1cb12f96cb6baedc132a3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Isometry &gt;</type>
      <name>Isometry3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaaab0779d16c81454c038cee3324585f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Projective &gt;</type>
      <name>Projective2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab2b63f5ecf343e58bee2eb482592bc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Projective &gt;</type>
      <name>Projective2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0af228e7443e5447de55bc7ba10b4d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Projective &gt;</type>
      <name>Projective3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad835f3f4d1783ee8b7ff85af90b9d13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Projective &gt;</type>
      <name>Projective3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaaf2985f9f12b96ba19c07a5ecd47056b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quaterniond</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0d2bd45f1215359f8e7c0d7ab53c4acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quaternionf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf65cf6f803890e57488d7de750bef682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabfe832b0fc8c4c8b4dcf8b59ebe25603</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga987bcae344d68a98892d0e9404138404</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, 0 &gt;</type>
      <name>QuaternionMapd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaca6aed0c662d8272c53663c0093aacaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, 0 &gt;</type>
      <name>QuaternionMapf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8d125241c02e63c656b75b38b2382816</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; double &gt;</type>
      <name>Rotation2Dd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga197b898c965d08135ebfb21bf41b23e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; float &gt;</type>
      <name>Rotation2Df</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga9a907f59280ce5650106a74904bab16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad118fececd448d7485ffea4858775e5a</anchor>
      <arglist>(Index a0, Index a1, Index a2) const </arglist>
    </member>
    <member kind="function">
      <type>internal::umeyama_transform_matrix_type&lt; Derived, OtherDerived &gt;::type</type>
      <name>umeyama</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab3f5a82a24490b936f8694cf8fef8e60</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;src, const MatrixBase&lt; OtherDerived &gt; &amp;dst, bool with_scaling=true)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Householder_Module</name>
    <title>Householder module</title>
    <filename>group__Householder__Module.html</filename>
    <class kind="class">Eigen::HouseholderSequence</class>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType &gt;</type>
      <name>householderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga5f2b3f80cdf7ae96609e4a8d2e55e371</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, OnTheRight &gt;</type>
      <name>rightHouseholderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga897ebce658762148f706f73a05525e89</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>IterativeLinearSolvers_Module</name>
    <title>IterativeLinearSolvers module</title>
    <filename>group__IterativeLinearSolvers__Module.html</filename>
    <class kind="class">Eigen::BiCGSTAB</class>
    <class kind="class">Eigen::ConjugateGradient</class>
    <class kind="class">Eigen::DiagonalPreconditioner</class>
    <class kind="class">Eigen::IdentityPreconditioner</class>
    <class kind="class">Eigen::IncompleteLUT</class>
    <class kind="class">Eigen::IterativeSolverBase</class>
  </compound>
  <compound kind="group">
    <name>Jacobi_Module</name>
    <title>Jacobi module</title>
    <filename>group__Jacobi__Module.html</filename>
    <class kind="class">Eigen::JacobiRotation</class>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>ga794a90a8b3f30366546f93c5b9b77b18</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LU_Module</name>
    <title>LU module</title>
    <filename>group__LU__Module.html</filename>
    <class kind="class">Eigen::FullPivLU</class>
    <class kind="class">Eigen::PartialPivLU</class>
  </compound>
  <compound kind="group">
    <name>MetisSupport_Module</name>
    <title>MetisSupport module</title>
    <filename>group__MetisSupport__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>OrderingMethods_Module</name>
    <title>OrderingMethods module</title>
    <filename>group__OrderingMethods__Module.html</filename>
    <class kind="class">Eigen::AMDOrdering</class>
    <class kind="class">Eigen::COLAMDOrdering</class>
    <class kind="class">Eigen::NaturalOrdering</class>
  </compound>
  <compound kind="group">
    <name>PardisoSupport_Module</name>
    <title>PardisoSupport module</title>
    <filename>group__PardisoSupport__Module.html</filename>
    <class kind="class">Eigen::PardisoLDLT</class>
    <class kind="class">Eigen::PardisoLLT</class>
    <class kind="class">Eigen::PardisoLU</class>
  </compound>
  <compound kind="group">
    <name>PaStiXSupport_Module</name>
    <title>PaStiXSupport module</title>
    <filename>group__PaStiXSupport__Module.html</filename>
    <class kind="class">Eigen::PastixLDLT</class>
    <class kind="class">Eigen::PastixLLT</class>
    <class kind="class">Eigen::PastixLU</class>
  </compound>
  <compound kind="group">
    <name>QR_Module</name>
    <title>QR module</title>
    <filename>group__QR__Module.html</filename>
    <class kind="class">Eigen::ColPivHouseholderQR</class>
    <class kind="class">Eigen::FullPivHouseholderQR</class>
    <class kind="class">Eigen::HouseholderQR</class>
  </compound>
  <compound kind="group">
    <name>Sparse_Module</name>
    <title>Sparse meta-module</title>
    <filename>group__Sparse__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>SparseCholesky_Module</name>
    <title>SparseCholesky module</title>
    <filename>group__SparseCholesky__Module.html</filename>
    <class kind="class">Eigen::SimplicialCholesky</class>
    <class kind="class">Eigen::SimplicialCholeskyBase</class>
    <class kind="class">Eigen::SimplicialLDLT</class>
    <class kind="class">Eigen::SimplicialLLT</class>
  </compound>
  <compound kind="group">
    <name>SparseCore_Module</name>
    <title>SparseCore module</title>
    <filename>group__SparseCore__Module.html</filename>
    <class kind="class">Eigen::SparseMatrix</class>
    <class kind="class">Eigen::SparseMatrixBase</class>
    <class kind="class">Eigen::SparseSelfAdjointView</class>
    <class kind="class">Eigen::SparseVector</class>
    <class kind="class">Eigen::Triplet</class>
  </compound>
  <compound kind="group">
    <name>SparseLU_Module</name>
    <title>SparseLU module</title>
    <filename>group__SparseLU__Module.html</filename>
    <class kind="class">Eigen::SparseLU</class>
  </compound>
  <compound kind="group">
    <name>SparseQR_Module</name>
    <title>SparseQR module</title>
    <filename>group__SparseQR__Module.html</filename>
    <class kind="class">Eigen::SparseQR</class>
  </compound>
  <compound kind="group">
    <name>SPQRSupport_Module</name>
    <title>SuiteSparseQR module</title>
    <filename>group__SPQRSupport__Module.html</filename>
    <class kind="class">Eigen::SPQR</class>
  </compound>
  <compound kind="group">
    <name>arraytypedefs</name>
    <title>Global array typedefs</title>
    <filename>group__arraytypedefs.html</filename>
  </compound>
  <compound kind="group">
    <name>matrixtypedefs</name>
    <title>Global matrix typedefs</title>
    <filename>group__matrixtypedefs.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 2 &gt;</type>
      <name>Matrix2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga099c0678ffaf850329241e45d616f127</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 2 &gt;</type>
      <name>Matrix2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga57974378374e0683c6b6896298fbf4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 2 &gt;</type>
      <name>Matrix2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5521d9f6a8d61d3f04a819b799ad9a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 2 &gt;</type>
      <name>Matrix2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga535a919504bb3bc463b8995c196c1eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 2 &gt;</type>
      <name>Matrix2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab837976997f1fdef130c5f47f712b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga60da1fab27a41c5663ddc22e9d0fe352</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae0f19b89e53299d61e32c1e20b4edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, Dynamic &gt;</type>
      <name>Matrix2Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga890734166f62e879d08de6822587faed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, Dynamic &gt;</type>
      <name>Matrix2Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga884b083c5e618a56b1b1618d8e07c41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, Dynamic &gt;</type>
      <name>Matrix2Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1e9de46a250c2065ae51792e59ec1568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 3 &gt;</type>
      <name>Matrix3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae1f1259a1b6332c8d008a9556f89817d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 3 &gt;</type>
      <name>Matrix3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac4bea75663d8da1d0cbddc839497e70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 3 &gt;</type>
      <name>Matrix3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga45a14b423c687c3e2e8325f148e27bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2b787393a7fc870d99aa634f60b2510c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 3 &gt;</type>
      <name>Matrix3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4b6688615f30a9959be0285115080c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7cf8ff902486d2eccd872ba4781697ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6cca6232694ed2aa230cfab679beebe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, Dynamic &gt;</type>
      <name>Matrix3Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac889e226b7d67d37f93bafc98adfc9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, Dynamic &gt;</type>
      <name>Matrix3Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga79157f175aa49e4079cd847b9bf79410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, Dynamic &gt;</type>
      <name>Matrix3Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga76a5aec1beb4782f445917f66c487798</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 4 &gt;</type>
      <name>Matrix4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab388a941709b398b716c3cc846216a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 4 &gt;</type>
      <name>Matrix4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga71b8df208787a9dff903b742ee603438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 4 &gt;</type>
      <name>Matrix4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gacd860ff07358f6a703c2c0d4a174e920</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 4 &gt;</type>
      <name>Matrix4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga548963d9c2934037af5f8e5b3df87e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 4 &gt;</type>
      <name>Matrix4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga43fa1a4828b3632224b0a959151ec232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac8cfbda98260714fbd78a642c4a396d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7b9a006b847a1b47b4e8a90cd0323565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, Dynamic &gt;</type>
      <name>Matrix4Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga95566e75fb12a668c77d1e2e005230ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, Dynamic &gt;</type>
      <name>Matrix4Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6a28e98ec348cb3f4a48b1cc35646bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, Dynamic &gt;</type>
      <name>Matrix4Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaaa90e93baa6e11e511b968b70d24c18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaad959aa3e87b56811ac416b69a550020</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9de825e14ff4855c195c2a0e68e71a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 2 &gt;</type>
      <name>MatrixX2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga06d226c6691b2615b3de62bd18c71630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 2 &gt;</type>
      <name>MatrixX2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga52645c7a2b0d8af2ddae0ccf0f31e8cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 2 &gt;</type>
      <name>MatrixX2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab11b939b03a55bc735a7d127df091c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaad6c6930fa3b393089a9473ec6a63b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga73f4699a87c647d4e14c9b5f43173203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 3 &gt;</type>
      <name>MatrixX3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3e8aca573cae87793e9020bf87decf1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 3 &gt;</type>
      <name>MatrixX3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga65248c5de749bda7303a570b6d6a2286</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 3 &gt;</type>
      <name>MatrixX3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaa2672f548faa60f8a3681032cf8771c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga441ee6a529f06b2147c0dd055df3f906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga07a6e071c27f235b2c2d8b50a8b600ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 4 &gt;</type>
      <name>MatrixX4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gacdfe8c2ae228f821e04de198e0dbe86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 4 &gt;</type>
      <name>MatrixX4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga073c9939b5a004734ff171cb04e269b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 4 &gt;</type>
      <name>MatrixX4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gadee1b51f69cea68ae7abbd34769c572f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf1d15c8c24df228ee4869535dcbfa288</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaec02f1e32a13e5997899a554105ebfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, Dynamic &gt;</type>
      <name>MatrixXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0750af9a6b82761985a15fe77256de87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, Dynamic &gt;</type>
      <name>MatrixXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabab09c32e96cfa9829a88400627af162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, Dynamic &gt;</type>
      <name>MatrixXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5b9d0d11e78fd355d23221154b7620e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 2 &gt;</type>
      <name>RowVector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga28406bb99d8e58d64245964b7e6dbd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 2 &gt;</type>
      <name>RowVector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabd4c4e04935df3a6d74960b983b589df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 2 &gt;</type>
      <name>RowVector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga51deeb3c5f239ffd85174f6327b6c3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 2 &gt;</type>
      <name>RowVector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabe998d13d60e68a525540100c0c39001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 2 &gt;</type>
      <name>RowVector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga721fa43db56fff83d1f96b2e370653c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 3 &gt;</type>
      <name>RowVector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaff362f0e0c416ababa3aca339aff34aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 3 &gt;</type>
      <name>RowVector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2787b7330c4c40a846b6fbbc41e6eb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 3 &gt;</type>
      <name>RowVector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae986937bbeec1aa1291655f47182813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 3 &gt;</type>
      <name>RowVector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad9a752d5e2af25d55179974812eae685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 3 &gt;</type>
      <name>RowVector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae7b6e03e3177833102d307f98aa543b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 4 &gt;</type>
      <name>RowVector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac13a7c4030de0d3fbebf9e5c4f66854d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 4 &gt;</type>
      <name>RowVector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gafc9dad885ad8c89e413e23e35b545219</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 4 &gt;</type>
      <name>RowVector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8dcc2e3014b26fdb333486f45dc9090d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 4 &gt;</type>
      <name>RowVector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7bab8f3ac41e8fad1184081a256595e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 4 &gt;</type>
      <name>RowVector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1b8ec6f0766c4900ed6f84f30c36669a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad3da7c10c3de35a4bbfc471fb148374f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga059ec94df743a79cde64618a03441a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, Dynamic &gt;</type>
      <name>RowVectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaa444957bc5772dc8e8cdfd1e3782234d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, Dynamic &gt;</type>
      <name>RowVectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad950c8ebb50f405c8eabecb68e873ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, Dynamic &gt;</type>
      <name>RowVectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2a50ca3334794218c2b5096fa25ca229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 1 &gt;</type>
      <name>Vector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5916a4c924969e2a89c4c5d07e062725</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 1 &gt;</type>
      <name>Vector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1abaac5a0208b4cd3b8c255a4d516e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga685d563d586f4820b4a2df9a07d98c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 1 &gt;</type>
      <name>Vector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7f1b1fd6061c265796ef9f5742854bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 1 &gt;</type>
      <name>Vector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae4b211eebc55d300139b0e6e34a06cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 1 &gt;</type>
      <name>Vector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga512cfe207272d8ece67a9adad344e748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 1 &gt;</type>
      <name>Vector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac886ec6df0250a7b2527488283857819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 1 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2006332f6989f501762673e21f5128f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 1 &gt;</type>
      <name>Vector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5ac9fb0df0c4858477890cce1f998096</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 1 &gt;</type>
      <name>Vector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaa4931fe5bb599038466be823fdfadd04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 1 &gt;</type>
      <name>Vector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga95401820f49d52fab6bfb4a5d8d4d6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 1 &gt;</type>
      <name>Vector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaff56da7b25b4c08b0f57c060cc068453</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 1 &gt;</type>
      <name>Vector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9bdb6b1010218b700f4bc0d23c7d2ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 1 &gt;</type>
      <name>Vector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga96452a1b0400ea4ef7935e06914a56b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 1 &gt;</type>
      <name>Vector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga59796d8b9a2d6b8ae762b4151d9fb87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3f53566af4e94dd734a669ffcf67560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae1c93041343a1ab92754065baed4ff7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 1 &gt;</type>
      <name>VectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3da45e59796fbacf67fa568297927bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 1 &gt;</type>
      <name>VectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gafb4ca692a80152d552761e665d0a508c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 1 &gt;</type>
      <name>VectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0312eb421909d32007ae4a55b9f22abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>flags</name>
    <title>Flags</title>
    <filename>group__flags.html</filename>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ActualPacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaafbee24aed0aa204db61f7fce3334329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>AlignedBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga972a2dcb6603215fa53e0b9e82051426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DirectAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga54c3b872f5a14e7e0d3d6539b704ea67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeAssigningBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gadc8925e67a5a54bd479d6f587112e19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeNestingBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaf8ad6e2956f7368b8e3f7407e2319e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LinearAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gab9799bf6feed77fc9fce0136ee55b99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LvalueBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga64e21b7543bdedce27f013512a4403a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>PacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaa780614dc11271c147db56e9c1524e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>RowMajorBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga7bd49e7b260e869e10fb9dc4fd081a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>enums</name>
    <title>Enumerations</title>
    <filename>group__enums.html</filename>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7af886b397626076218462d53d50eb96bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7ae70afef0d3ff7aca74e17e85ff6c9f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7ab051342541ee4cd3d2d7d710ba7c8a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7a72b90f18314e6abbe9193224547df48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7a0dc6c411b3fc7ae6e32860a7872b7d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7a65b1d67b2bb2e4a85b5f6a8863cd7109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7a29eb98bd08096415c55f37ed4ac2af11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7abf11791f004a059cfdd9b941c76f3703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfAdjoint</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7ac2a895b4256c681bdaa7cce26ab4e487</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga07422cff4c3dd5075f91f87bd0e57ee7a33e94d2249181e0e1f815e7c0affc69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unaligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga905301dc85f7361d62f56f9dea55cf2cafeaf599f3da3693d2ab4a7cc48a19437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga905301dc85f7361d62f56f9dea55cf2cad5380ca00f3d74b38593adf8a0d06d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac6bea760bc75e449a80b8cc28bf9a2feac86184b0e3be936fbfd20249a057a0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac6bea760bc75e449a80b8cc28bf9a2fea1e16fa1b92ed7a058cd4ce7a9a0db044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutoAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac6bea760bc75e449a80b8cc28bf9a2fea02a97bb4792f98916a1156a521fa9813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac6bea760bc75e449a80b8cc28bf9a2fea761c0504a518c7450ed6dfe9eaeab8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheLeft</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaff44cf33e83896b8e5102305d23db5aca02217d2d79111440646e3b00c747745f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheRight</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaff44cf33e83896b8e5102305d23db5acaeda0d7b1859ec757de18ee3b7c6c541c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AccessorLevels</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga7a6570775cf702f4d7a578fdbad75b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadOnlyAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga7a6570775cf702f4d7a578fdbad75b2ea4ef687d4d4934463c6f9285c806b7d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga7a6570775cf702f4d7a578fdbad75b2ea2edac285bba78bd48a94da7f6492a945</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga7a6570775cf702f4d7a578fdbad75b2eaf0e4e8501bf4ed6c5f9af337d6c1ddf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectWriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga7a6570775cf702f4d7a578fdbad75b2eabe9e80fe8a8bbadef8e22bf27e6ba156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ComputationInfo</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga51bc1ac16f26ebe51eae1abb77bd037b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Success</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga51bc1ac16f26ebe51eae1abb77bd037bafdfbdf3247bd36a1f17270d5cec74c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumericalIssue</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga51bc1ac16f26ebe51eae1abb77bd037ba710fff14e8fc77846d4b75d8f4cc2d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoConvergence</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga51bc1ac16f26ebe51eae1abb77bd037ba4ff235bd185f3c5fceeec8d6540eb847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidInput</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga51bc1ac16f26ebe51eae1abb77bd037bae1252631a63be5890a1e78ff417d378f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CornerType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga550469de139cb6f1605cb7cb2bbc79db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DecompositionOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga2d78499b99ddc29b9494f7ea33864d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52a75953ad8f5837a79d6fbd3c116e7d462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52aa1954d61a33cbb0e9960ca88085ec487</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52a1785ac1174dab733556ac572448984c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52aa0bec1072bc1ecbbaaa436f96fe02e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EigenvaluesOnly</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52adaf09d7c7a09d6c882b1a871268e87dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeEigenvectors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52a92a556ff1203acee3bacb02b0d157870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ax_lBx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52a3ae14e2ec1852cd8f07f401186f92bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52aef728f6a0183a2218d9c9ff8387a2550</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga2d78499b99ddc29b9494f7ea33864d52a4313e64c939f7bc1df2a67958ebdbae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DirectionType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga8ef30fa9c08e08c8706653571f9f5b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vertical</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga8ef30fa9c08e08c8706653571f9f5b81a2434cd8c1a594a4cdaa250f86639c600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Horizontal</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga8ef30fa9c08e08c8706653571f9f5b81a7d5f78c516bedc0a066182a6fd606b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BothDirections</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga8ef30fa9c08e08c8706653571f9f5b81a45def18a07325686f25627f90734e202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QRPreconditioners</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gae270f00cf5924aa856a955a394d020d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae270f00cf5924aa856a955a394d020d5aac42a4689c2325740cbc23311ba9327e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae270f00cf5924aa856a955a394d020d5a37392bfbf297a25f985f9e69deddc24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae270f00cf5924aa856a955a394d020d5a257ca0f85f8cac7a2fa8481cc17b1c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae270f00cf5924aa856a955a394d020d5a2dbd40407bbe2752e0498ea4ae7f6c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TransformTraits</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga302a826315506a7217d4b477ea78425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Isometry</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga302a826315506a7217d4b477ea78425fac6ccc3814bb6d2a8bf7f75d7131c6b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Affine</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga302a826315506a7217d4b477ea78425fac0984f0c0fc7cdcea1c0bde170f9c925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AffineCompact</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga302a826315506a7217d4b477ea78425faff9f02205c7dca9999837f996df1d06e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Projective</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga302a826315506a7217d4b477ea78425fa732168807730e0e931f3c5792b99b672</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>alignedboxtypedefs</name>
    <title>Global aligned box typedefs</title>
    <filename>group__alignedboxtypedefs.html</filename>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 1 &gt;</type>
      <name>AlignedBox1d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga4dd1d7dc494daf9875cb269c42132af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 1 &gt;</type>
      <name>AlignedBox1f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga50b9c58cdfe3fd037046de0fc41e3c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 1 &gt;</type>
      <name>AlignedBox1i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga251448d008cc481d512a6434927d84ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 2 &gt;</type>
      <name>AlignedBox2d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gabab056de6845fd1f81a4b7b7aeae8a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 2 &gt;</type>
      <name>AlignedBox2f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga6f1d7eeaf52e43e12e5fd8f9c39bac6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 2 &gt;</type>
      <name>AlignedBox2i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gad6939f99f23d3b555d06740e6ff7e621</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 3 &gt;</type>
      <name>AlignedBox3d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga3187e14b82b26fc49268b84658d01de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 3 &gt;</type>
      <name>AlignedBox3f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gaf887dd68f34d4cd7a7d6f4a36dec7a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 3 &gt;</type>
      <name>AlignedBox3i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga999b927b5f8851626f75d4a826e79009</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 4 &gt;</type>
      <name>AlignedBox4d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gab0a318a732814dd3d6120e08a7660489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 4 &gt;</type>
      <name>AlignedBox4f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga34536b06ad816a5f5801f712accf0359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 4 &gt;</type>
      <name>AlignedBox4i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga1c8eff0becf3500da2ffe64772bc5737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, Dynamic &gt;</type>
      <name>AlignedBoxXd</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gaddda07bac69c92cf75f689ff210e7015</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, Dynamic &gt;</type>
      <name>AlignedBoxXf</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga1d2fb743c9f1d10d915d2f3a09ae31c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, Dynamic &gt;</type>
      <name>AlignedBoxXi</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gab96c33719aa8716db2935ac827a05c8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SuperLUSupport_Module</name>
    <title>SuperLUSupport module</title>
    <filename>group__SuperLUSupport__Module.html</filename>
    <class kind="class">Eigen::SuperILU</class>
    <class kind="class">Eigen::SuperLU</class>
    <class kind="class">Eigen::SuperLUBase</class>
  </compound>
  <compound kind="group">
    <name>SVD_Module</name>
    <title>SVD module</title>
    <filename>group__SVD__Module.html</filename>
    <class kind="class">Eigen::JacobiSVD</class>
  </compound>
  <compound kind="group">
    <name>UmfPackSupport_Module</name>
    <title>UmfPackSupport module</title>
    <filename>group__UmfPackSupport__Module.html</filename>
    <class kind="class">Eigen::UmfPackLU</class>
  </compound>
  <compound kind="group">
    <name>TopicFixedSizeVectorizable</name>
    <title>Fixed-size vectorizable Eigen objects</title>
    <filename>group__TopicFixedSizeVectorizable.html</filename>
    <docanchor file="Experimental">summary</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">explanation</docanchor>
  </compound>
  <compound kind="group">
    <name>Support_modules</name>
    <title>Support modules</title>
    <filename>group__Support__modules.html</filename>
    <subgroup>CholmodSupport_Module</subgroup>
    <subgroup>MetisSupport_Module</subgroup>
    <subgroup>PardisoSupport_Module</subgroup>
    <subgroup>PaStiXSupport_Module</subgroup>
    <subgroup>SPQRSupport_Module</subgroup>
    <subgroup>SuperLUSupport_Module</subgroup>
    <subgroup>UmfPackSupport_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_chapter</name>
    <title>Dense matrix and array manipulation</title>
    <filename>group__DenseMatrixManipulation__chapter.html</filename>
    <subgroup>TutorialMatrixClass</subgroup>
    <subgroup>TutorialMatrixArithmetic</subgroup>
    <subgroup>TutorialArrayClass</subgroup>
    <subgroup>TutorialBlockOperations</subgroup>
    <subgroup>TutorialAdvancedInitialization</subgroup>
    <subgroup>TutorialReductionsVisitorsBroadcasting</subgroup>
    <subgroup>TutorialMapClass</subgroup>
    <subgroup>TopicAliasing</subgroup>
    <subgroup>TopicStorageOrders</subgroup>
    <subgroup>DenseMatrixManipulation_Alignement</subgroup>
    <subgroup>DenseMatrixManipulation_Reference</subgroup>
    <subgroup>QuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Alignement</name>
    <title>Alignment issues</title>
    <filename>group__DenseMatrixManipulation__Alignement.html</filename>
    <subgroup>TopicUnalignedArrayAssert</subgroup>
    <subgroup>TopicFixedSizeVectorizable</subgroup>
    <subgroup>TopicStructHavingEigenMembers</subgroup>
    <subgroup>TopicStlContainers</subgroup>
    <subgroup>TopicPassingByValue</subgroup>
    <subgroup>TopicWrongStackAlignment</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Reference</name>
    <title>Reference</title>
    <filename>group__DenseMatrixManipulation__Reference.html</filename>
    <subgroup>Core_Module</subgroup>
    <subgroup>Jacobi_Module</subgroup>
    <subgroup>Householder_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_chapter</name>
    <title>Dense linear problems and decompositions</title>
    <filename>group__DenseLinearSolvers__chapter.html</filename>
    <subgroup>TutorialLinearAlgebra</subgroup>
    <subgroup>TopicLinearAlgebraDecompositions</subgroup>
    <subgroup>DenseLinearSolvers_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_Reference</name>
    <title>Reference</title>
    <filename>group__DenseLinearSolvers__Reference.html</filename>
    <subgroup>Cholesky_Module</subgroup>
    <subgroup>LU_Module</subgroup>
    <subgroup>QR_Module</subgroup>
    <subgroup>SVD_Module</subgroup>
    <subgroup>Eigenvalues_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_chapter</name>
    <title>Sparse linear algebra</title>
    <filename>group__Sparse__chapter.html</filename>
    <subgroup>TutorialSparse</subgroup>
    <subgroup>TopicSparseSystems</subgroup>
    <subgroup>Sparse_Reference</subgroup>
    <subgroup>SparseQuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_Reference</name>
    <title>Reference</title>
    <filename>group__Sparse__Reference.html</filename>
    <subgroup>SparseCore_Module</subgroup>
    <subgroup>OrderingMethods_Module</subgroup>
    <subgroup>SparseCholesky_Module</subgroup>
    <subgroup>SparseLU_Module</subgroup>
    <subgroup>SparseQR_Module</subgroup>
    <subgroup>IterativeLinearSolvers_Module</subgroup>
    <subgroup>Sparse_Module</subgroup>
    <subgroup>Support_modules</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_chapter</name>
    <title>Geometry</title>
    <filename>group__Geometry__chapter.html</filename>
    <subgroup>TutorialGeometry</subgroup>
    <subgroup>Geometry_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_Reference</name>
    <title>Reference</title>
    <filename>group__Geometry__Reference.html</filename>
    <subgroup>Geometry_Module</subgroup>
    <subgroup>Splines_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>TopicPassingByValue</name>
    <title>Passing Eigen objects by value to functions</title>
    <filename>group__TopicPassingByValue.html</filename>
  </compound>
  <compound kind="group">
    <name>QuickRefPage</name>
    <title>Quick reference guide</title>
    <filename>group__QuickRefPage.html</filename>
    <docanchor file="group__QuickRefPage">QuickRef_Basics</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_TriangularView</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Reverse</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Misc</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_DiagTriSymm</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Headers</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_PredefMat</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Types</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Diagonal</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_SelfadjointMatrix</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Replicate</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Blocks</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Coeffwise</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Reductions</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_ArithmeticOperators</docanchor>
    <docanchor file="group__QuickRefPage">QuickRef_Map</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicSparseSystems</name>
    <title>Solving Sparse Linear Systems</title>
    <filename>group__TopicSparseSystems.html</filename>
    <docanchor file="group__TopicSparseSystems">TutorialSparseDirectSolvers</docanchor>
    <docanchor file="group__TopicSparseSystems">BenchmarkRoutine</docanchor>
    <docanchor file="group__TopicSparseSystems">TheSparseSolve</docanchor>
    <docanchor file="group__TopicSparseSystems">TheSparseCompute</docanchor>
  </compound>
  <compound kind="group">
    <name>SparseQuickRefPage</name>
    <title>Quick reference guide for sparse matrices</title>
    <filename>group__SparseQuickRefPage.html</filename>
    <docanchor file="group__SparseQuickRefPage">SparseBasicInfos</docanchor>
    <docanchor file="group__SparseQuickRefPage">sparseotherops</docanchor>
    <docanchor file="group__SparseQuickRefPage">SparseBasicOps</docanchor>
    <docanchor file="group__SparseQuickRefPage">SparseMatrixInit</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStlContainers</name>
    <title>Using STL Containers with Eigen</title>
    <filename>group__TopicStlContainers.html</filename>
    <docanchor file="Experimental">summary</docanchor>
    <docanchor file="group__TopicStlContainers">vector</docanchor>
    <docanchor file="group__TopicStlContainers">allocator</docanchor>
    <docanchor file="group__TopicStlContainers">vector_spec</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStorageOrders</name>
    <title>Storage orders</title>
    <filename>group__TopicStorageOrders.html</filename>
    <docanchor file="group__TopicStorageOrders">TopicStorageOrdersWhich</docanchor>
    <docanchor file="group__TopicStorageOrders">TopicStorageOrdersInEigen</docanchor>
    <docanchor file="group__TopicStorageOrders">TopicStorageOrdersIntro</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStructHavingEigenMembers</name>
    <title>Structures Having Eigen Members</title>
    <filename>group__TopicStructHavingEigenMembers.html</filename>
    <docanchor file="group__TopicStructHavingEigenMembers">why</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">bugineigen</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">othersolutions</docanchor>
    <docanchor file="Experimental">summary</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">what</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">conditional</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">movetotop</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">dynamicsize</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">how</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">othersolutions1</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers">othersolutions2</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicAliasing</name>
    <title>Aliasing</title>
    <filename>group__TopicAliasing.html</filename>
    <docanchor file="group__TopicAliasing">TopicAliasingMatrixMult</docanchor>
    <docanchor file="group__TopicAliasing">TopicAliasingSolution</docanchor>
    <docanchor file="group__TopicAliasing">TopicAliasingExamples</docanchor>
    <docanchor file="group__TopicAliasing">TopicAliasingSummary</docanchor>
    <docanchor file="group__TopicAliasing">TopicAliasingCwise</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicLinearAlgebraDecompositions</name>
    <title>Catalogue of dense decompositions</title>
    <filename>group__TopicLinearAlgebraDecompositions.html</filename>
    <docanchor file="group__TopicLinearAlgebraDecompositions">TopicLinAlgTerminology</docanchor>
    <docanchor file="group__TopicLinearAlgebraDecompositions">TopicLinAlgBigTable</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialAdvancedInitialization</name>
    <title>Advanced initialization</title>
    <filename>group__TutorialAdvancedInitialization.html</filename>
    <docanchor file="group__TutorialAdvancedInitialization">TutorialAdvancedInitializationTemporaryObjects</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization">TutorialAdvancedInitializationCommaInitializer</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization">TutorialAdvancedInitializationSpecialMatrices</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialArrayClass</name>
    <title>The Array class and coefficient-wise operations</title>
    <filename>group__TutorialArrayClass.html</filename>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassAccess</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassCwiseOther</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassTypes</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassIntro</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassConvert</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassMult</docanchor>
    <docanchor file="group__TutorialArrayClass">TutorialArrayClassAddSub</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialBlockOperations</name>
    <title>Block operations</title>
    <filename>group__TutorialBlockOperations.html</filename>
    <docanchor file="group__TutorialBlockOperations">TutorialBlockOperationsSyntaxCorners</docanchor>
    <docanchor file="group__TutorialBlockOperations">TutorialBlockOperationsUsing</docanchor>
    <docanchor file="group__TutorialBlockOperations">TutorialBlockOperationsSyntaxColumnRows</docanchor>
    <docanchor file="group__TutorialBlockOperations">TutorialBlockOperationsSyntaxVectors</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialGeometry</name>
    <title>Space transformations</title>
    <filename>group__TutorialGeometry.html</filename>
    <docanchor file="group__TutorialGeometry">TutorialGeoTransform</docanchor>
    <docanchor file="group__TutorialGeometry">TutorialGeoEulerAngles</docanchor>
    <docanchor file="group__TutorialGeometry">TutorialGeoElementaryTransformations</docanchor>
    <docanchor file="group__TutorialGeometry">TutorialGeoCommontransformationAPI</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialLinearAlgebra</name>
    <title>Linear algebra and decompositions</title>
    <filename>group__TutorialLinearAlgebra.html</filename>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgSeparateComputation</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgLeastsquares</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgEigensolving</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgInverse</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgSolutionExists</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgRankRevealing</docanchor>
    <docanchor file="group__TutorialLinearAlgebra">TutorialLinAlgBasicSolve</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMapClass</name>
    <title>Interfacing with raw buffers: the Map class</title>
    <filename>group__TutorialMapClass.html</filename>
    <docanchor file="group__TutorialMapClass">TutorialMapTypes</docanchor>
    <docanchor file="group__TutorialMapClass">TutorialMapUsing</docanchor>
    <docanchor file="group__TutorialMapClass">TutorialMapPlacementNew</docanchor>
    <docanchor file="group__TutorialMapClass">TutorialMapIntroduction</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixArithmetic</name>
    <title>Matrix and vector arithmetic</title>
    <filename>group__TutorialMatrixArithmetic.html</filename>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticIntroduction</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticDotAndCross</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticMentionXprTemplates</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticValidity</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticTranspose</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticAddSub</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticRedux</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticMatrixMul</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic">TutorialArithmeticScalarMulDiv</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixClass</name>
    <title>The Matrix class</title>
    <filename>group__TutorialMatrixClass.html</filename>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixAssignment</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixSizesResizing</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixCommaInitializer</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixVectors</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixCoeffAccessors</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixDynamic</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixOptTemplParams</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixConstructors</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixFirst3Params</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixTypedefs</docanchor>
    <docanchor file="group__TutorialMatrixClass">TutorialMatrixFixedVsDynamic</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialReductionsVisitorsBroadcasting</name>
    <title>Reductions, visitors and broadcasting</title>
    <filename>group__TutorialReductionsVisitorsBroadcasting.html</filename>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingBroadcastingCombined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingPartialReductionsCombined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingPartialReductions</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingReductionsNorm</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingBroadcasting</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingVisitors</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingReductionsUserdefined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingReductionsBool</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting">TutorialReductionsVisitorsBroadcastingReductions</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialSparse</name>
    <title>Sparse matrix manipulations</title>
    <filename>group__TutorialSparse.html</filename>
    <docanchor file="group__TutorialSparse">TutorialSparseFilling</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparse_BasicOps</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparseExample</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparse_Products</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparseFeatureSet</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparseIntro</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparse_TriangularSelfadjoint</docanchor>
    <docanchor file="group__TutorialSparse">TutorialSparseSparseMatrix</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicUnalignedArrayAssert</name>
    <title>Explanation of the assertion on unaligned arrays</title>
    <filename>group__TopicUnalignedArrayAssert.html</filename>
    <docanchor file="group__TopicUnalignedArrayAssert">c1</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">where</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">c2</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">c3</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">explanation</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">c4</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert">getrid</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicWrongStackAlignment</name>
    <title>Compiler making a wrong assumption on stack alignment</title>
    <filename>group__TopicWrongStackAlignment.html</filename>
    <docanchor file="group__TopicWrongStackAlignment">sec_sol1</docanchor>
    <docanchor file="group__TopicWrongStackAlignment">sec_sol2</docanchor>
  </compound>
  <compound kind="group">
    <name>Splines_Module</name>
    <title>Splines_Module</title>
    <filename>group__Splines__Module.html</filename>
  </compound>
  <compound kind="class">
    <name>GeneralProduct</name>
    <filename>classGeneralProduct.html</filename>
  </compound>
  <compound kind="class">
    <name>MapBase</name>
    <filename>classMapBase.html</filename>
  </compound>
  <compound kind="class">
    <name>Scaling</name>
    <filename>classScaling.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::aligned_allocator</name>
    <filename>classEigen_1_1aligned__allocator.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::AlignedBox</name>
    <filename>classEigen_1_1AlignedBox.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_AmbientDim</templarg>
    <member kind="enumeration">
      <name>CornerType</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a550469de139cb6f1605cb7cb2bbc79db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a550469de139cb6f1605cb7cb2bbc79dbabdec2b9cc9c6321c039e5b530793c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a550469de139cb6f1605cb7cb2bbc79dbae61b9b6ea2fa75ca500d5bb1eaf6f6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a550469de139cb6f1605cb7cb2bbc79dba52979d51bf12262bfda98a46dbe37a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a65c24247d90726cff7b91048a3d2a053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a8be261176f5fc525e53d418bb96cc97d</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ad12d64048ccd4f491400a09005ab218e</anchor>
      <arglist>(const OtherVectorType1 &amp;_min, const OtherVectorType2 &amp;_max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a430b51c80b4df1587ae4c65c77e41b72</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a7c054078a8d070d87c529f8ea915c931</anchor>
      <arglist>(const AlignedBox&lt; OtherScalarType, AmbientDimAtCompileTime &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AlignedBox, AlignedBox&lt; NewScalarType, AmbientDimAtCompileTime &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>abdc77e960c5c836224dc320abd1077cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; Scalar &gt;, const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const VectorType, const VectorType &gt; &gt;</type>
      <name>center</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac2ee58233ad14003e679401a219116d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>clamp</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a254af66a9538bf46354a04bc557c4771</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a241f11ee94ba9b2509a1c1e663a107bf</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a3a808a7b2d30081b831718fe8045299d</anchor>
      <arglist>(const AlignedBox &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>corner</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a7062e3999ddc83efb5630606fc66854f</anchor>
      <arglist>(CornerType corner) const </arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a719a629c0b4de31b6f8ed0a25c1ab964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a8809dd8f7c45e11b3f62c3fcf0175e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aa07edc659ec2dba7432ad9764e776e55</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_p)</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae25d7d20ec0b045b21b26be1cfb14dad</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aeda654b6b970d5be7f5acb3cd32e9cc2</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a6cffb8f1abcbcd816e19a1af380fd51f</anchor>
      <arglist>(const AlignedBox &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0575daea2329c209ba87ab9877392afb</anchor>
      <arglist>(const AlignedBox &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a89fcc80e14ed2f50d208ae08c141026e</anchor>
      <arglist>(const AlignedBox &amp;other, const RealScalar &amp;prec=ScalarTraits::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a479432127ee77145cc19d6a2d1590821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac02f2a4d7312eb91f40980adfd4e31b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac4b28966688278dc5c75317ad247a56d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aec855ed1ec57d99ba97b7c19f2c14c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>merged</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a5d0163aac9ba4386495c0f55874928ed</anchor>
      <arglist>(const AlignedBox &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0932584c49b7955f4aceeb402fca3f73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a850ce6002c16b3c1e0abd0e03322a33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>sample</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ab7b22de07fd70e4b818df179d427b40c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac95684b9162e286c96faf0f6cefe7ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a91e28e1274cd18a6413c67bf55356cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>sizes</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a4f90815de0ec31caa8a106b55d235841</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a70ef5d7c9573639962c3aba090ff8337</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_p) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a42c9e75e69f52639b6a8430c92cad681</anchor>
      <arglist>(const AlignedBox &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a05fcbd6a7d16d8f8a91e4cde003dd700</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_t)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>volume</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a8c1962f5f9c775de3b8fbbd29c6037da</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AMDOrdering</name>
    <filename>classEigen_1_1AMDOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>ac34b06dbd6ced375bdcafe85f0ccd3e4</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>ad66ac96678a2f5da4de623f8ae94d31c</anchor>
      <arglist>(const SparseSelfAdjointView&lt; SrcType, SrcUpLo &gt; &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AngleAxis</name>
    <filename>classEigen_1_1AngleAxis.html</filename>
    <templarg>_Scalar</templarg>
    <base>RotationBase&lt; AngleAxis&lt; _Scalar &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a38772216b8d784ddbe99d2d3df961f32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aff009fcfc0377acd2db48fb754ae1f62</anchor>
      <arglist>(const Scalar &amp;angle, const MatrixBase&lt; Derived &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aae1f1d7628b3f3d29e26dc480f4d037d</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a45ad10816a418d3d86130608fd6ca996</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ad71c1c9e6a581420cba5205f837af1b5</anchor>
      <arglist>(const AngleAxis&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AngleAxis, AngleAxis&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a0469e863c2bf6b5c2d5655c8f4956d65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AngleAxis &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a1848acad30bc792e84804d46a397772e</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a68dbca4080079a7376bc8d6cfd8fe098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a729107ea8555246d34f872febb8b14ce</anchor>
      <arglist>(const AngleAxis &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; AngleAxis&lt; _Scalar &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>afbaeb13e13184d381a9e443166fc66b8</anchor>
      <arglist>(const AngleAxis &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a83533759bf90b1514c756cd538101736</anchor>
      <arglist>(const QuaternionType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>AngleAxis &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a0bd37726a2a8579fab7b0da43e793389</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a33073e174b2a81fc0c7e9e24ef44cb44</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a34adf4403bbc909c67309fbc7b6dbc16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const AngleAxis&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const AngleAxis&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>acdec7200dd68b70b615bcda9659fed26</anchor>
      <arglist>(const QuaternionType &amp;a, const AngleAxis &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Array</name>
    <filename>classEigen_1_1Array.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1b110a87160375196234ab5b3aea7e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>abs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab59be4dd3367c1d8c3346f37874c42f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_acos_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>acos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0746d3bd3ca5632b87007e8bae1ad50e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>af9474cac29f3177edf5e8d72ea4a440c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0ddb8a5330d84ebc05b703eaa0992177</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a13d4d76709810d61499a6a986e7ae103</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>af8fe0587120f30aebd3a6ff0d59b0c4a</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>af47658732a4450c1fd3f597875d708ed</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac13f7a2020a0fcc45da8c1f8b09734e1</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae725506723d1e2684e931b51d0c8ef41</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b2d2aba2e64b58c980399838f60205c</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7bce2d3d81b0dcd53c67ccfe5d77a731</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>abd1733594df2b508b2f02aa531e6bc18</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_asin_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>asin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88a7cd6fb70e9546dc1c1c833c2ea4a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a011215bc930d7298944ee5d95a0a3579</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar, NewType &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ac24a195e3e35ce2d8946cee5873e51</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae238393021f2b8298b1fb1c094ccb290</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abbf58a9ff956976fb3a26d2a0f6a9dc3</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3202c9faf8977ca71a9b53ef4e4cc70b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a55aac6d6465a7c6b67b10aba69a6da54</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cos_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a05c41677172ecd1bee69c82a9e14330f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cube_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cube</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3ab445c58c087ff29b2f4751f24733db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae0ced82e091d512fae815fd75262eb9f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a877ffa7bbed153a1794df6770e991a67</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7af0b2f4acae2de81c82c048f84a83f5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adec5e960b36e3f31fcd2a02d78228f7b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;::Scalar, typename OtherDerived::Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4af6e84f768629f192d6e182a7151f8d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a607a35dda475a4bba6a92f6663bc5c1a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a40dcc334db75411e168691d9bce08c3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4663159a1450fa89214b1ab71f7ef5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_exp_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6d8c23a6e741fa9dc905f7d69f8d4350</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49544028ab4b11f85bf112d220ad0e05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a468be7f76aaf518d692d9888a00ad23b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_log_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abed56aee590f967548b728415047d3af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a534d52e9394efc21d065c79c189b78c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>add2c757190d66c4d10d44b74c07a9e0f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa8db4eae3f8e53058f719953af9ade53</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a916d59a95c3ac1784b4ee7fd35c1638d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acac79e1e55e72414bfa84349d19e2a74</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9a5a8d0dc02cd4e1649d641081ba925c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>afce9cebae4c9cbb9883e73d515b5570f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;::Scalar, typename OtherDerived::Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba947e9f968d8c304e320a6adfa11f58</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0c5fe5b14df6c536815de786f5d5e12a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49b9b40206fe10320613f469b72e35bf</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa4db25bbe4b95848b64ac55db24badac</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a62cfea0bdbdd10fb977e0eb5cdc4eb7a</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a30e1ad7f2803f63d1193e730b1972392</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac2246d9905c49ad28b75014a374f0412</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less_equal&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad33bcd208b8415bcd6d1e999bb3abe14</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>af0ea08990d362074d79964b6d7e8d33d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ab3919af93cc9ce5e05f0d84f0d9ccc49</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a9ff37bbe82f866b8ec53479daf70d90f</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a97b38cfe225c9d9979176495f87fc460</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a44845986b4eb5f35e53e61ff8dc47fee</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater_equal&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac6d7c71e57a7de2a7e64bed8f968b562</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab642724ec8df57c7351af27f1a8f213b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_pow_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a968854dd9015b8c1ef942c230b173f75</anchor>
      <arglist>(const Scalar &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0b8db206b78137e95dc0833952ed1ed0</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aec9ca3c51c341a06bce3451ff1adc84d</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a58d9d13dd3982d05458767072c257886</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abe7b7417203825a6e434449cf0ac6529</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sin_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aeace4917b5449188b24c32c457e5c5e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae9f5fba39401def562700a1cd7b0fd7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_square_op&lt; Scalar &gt;, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>square</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a51ce605edc09ac87de229f7720a2580d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a1bbc10b6841540f1deb375650d898680</anchor>
      <arglist>(ArrayBase&lt; OtherDerived &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_tan_op&lt; Scalar &gt;, Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>tan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3e5e02b55c501fb2304f4b06a34cc3f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac52c575853da7de243d1142a35349e96</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6ffd15e8174a79a69a2b85fb36766748</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1660531fc88568a5defdb00224415e5</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7fde2114110ce2e1dea247ca7ea4ec80</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6d2f0645c710c69d2867330ad52e3eb4</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afe74b89d21566bcafff0a785d29aa9ec</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc12d3da3334f074ef78ce4574c02b1e</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62e1507113597a170c6da1f5160f4e6e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af42b8fbe1ec1c53f7be0c87ff642b930</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad288d654300a85d77774538cabf0883c</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a068773dba022bcc362ca5ef41d10e5e3</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7584fd4fbe3e3d5f2d24ff381955fbf8</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8dac2e03da821c7e7342d94280c8b423</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8a4c8353053c367b476f29293c45519c</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5021a7d90793fec34552875251568d9d</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aecf57b80587a641c17b7359b2c72250b</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad010f9df8245dadc5a19c02be6d7bcf8</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a63a6bbf40be3ee18223fd59db789350c</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62b9ecc0dd231c7a5eccc3963511d4ec</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adc7a2af56aad9706af5b930732b2be2e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae7b75e75f67b55b84a6c62e2d4577ff6</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2bfa83224478c85a37ddd962c3d844d</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3f8c3ef5aef0d73923826d00984e3675</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acb3e6d1b9633c1d4a7a74be8903e6334</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3cbc7e8bccd9a8736af1a9968dec74d9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayBase</name>
    <filename>classEigen_1_1ArrayBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::DenseBase</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea38ab482a62bf46f6ed6dcc4e9dd0dddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eae943bdba893721a848dfcd03db756b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eab30be5c02d7a124ec165d2ab6c5b05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea1264a9a69c437cbe0f8e723d88471c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eac9998fd25639e32ba4d58d67bfff4420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eacf4ecb7db5a851c1ff90ae7621ab3fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea7e22277c8f0a1a76dd0d6c62e366b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea96296863b401484bc191339414c90e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea247b0f8b0eb0bfd5e253eb1e4b61436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea17c43b803133ba4f73b417edcbfb8206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>abs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1b110a87160375196234ab5b3aea7e1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>abs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab59be4dd3367c1d8c3346f37874c42f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_acos_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>acos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0746d3bd3ca5632b87007e8bae1ad50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aea914316af61df197f21629e14e7870a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac1dba91a5de689327121c20af5a5c18a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a42571e028736ca9103bac8b50f269824</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_asin_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>asin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88a7cd6fb70e9546dc1c1c833c2ea4a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a011215bc930d7298944ee5d95a0a3579</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Derived &gt;::Scalar, NewType &gt;, const Derived &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a49a617f24129ca31a27fe8a67ec20370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe7ae69362c464b6721adbb47c655874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cos_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a05c41677172ecd1bee69c82a9e14330f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa671b5ea336ba21a7644d3fa6577ee00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cube_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cube</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3ab445c58c087ff29b2f4751f24733db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae0ced82e091d512fae815fd75262eb9f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a877ffa7bbed153a1794df6770e991a67</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7af0b2f4acae2de81c82c048f84a83f5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adec5e960b36e3f31fcd2a02d78228f7b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Derived::Scalar, typename OtherDerived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4af6e84f768629f192d6e182a7151f8d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a607a35dda475a4bba6a92f6663bc5c1a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_exp_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6d8c23a6e741fa9dc905f7d69f8d4350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a98692bec8f3d859f1e7a60eab87ac571</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Flagged&lt; Derived, Added, Removed &gt;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afcbba97b05d9a88657783dfc4f931f3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Derived &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa364b60e6a2a124ea7392e4c0550fb4e</anchor>
      <arglist>(const IOFormat &amp;fmt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa867b1db3fb2dd56e7072c7684960ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49544028ab4b11f85bf112d220ad0e05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a158c2184951e6e415c2e9b98db8e8966</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed2515d3d813e1355933b6e0def44640</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a045c430069e53c7589e71fcc6984c8a8</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40b9e8df68a52b2d46cf70c9babf2a16</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaa59b5a40da397d905789cf99bce18d5</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a34b4423fdfdf0c0644268095c55fe6ea</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6dc0eb069536157ead1d46c660b9622d</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_log_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abed56aee590f967548b728415047d3af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; Derived &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a534d52e9394efc21d065c79c189b78c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>add2c757190d66c4d10d44b74c07a9e0f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa8db4eae3f8e53058f719953af9ade53</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878f0dae18b28d8158c5f1c232edced2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aad851ef369d212dcea81d9cded12dbdd</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b381dbcb0435c3a34a78abad4726cc3</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0af2b3991862a079e3efaef3e4d17d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a916d59a95c3ac1784b4ee7fd35c1638d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acac79e1e55e72414bfa84349d19e2a74</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add6cb2d85282829eb9adc9565ce784d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad927d600371ba16dcb44518530ba906a</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae959fb7401b9cfdf900ff3b295466526</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Derived &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a324b9263b40738a260d46ff011b8d31b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9a5a8d0dc02cd4e1649d641081ba925c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Derived, const OtherDerived &gt;</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>afce9cebae4c9cbb9883e73d515b5570f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Derived::Scalar, typename OtherDerived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba947e9f968d8c304e320a6adfa11f58</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a07b6409d2c94592596705d93f6e19ae4</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0c5fe5b14df6c536815de786f5d5e12a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49b9b40206fe10320613f469b72e35bf</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab5a4e8dad92c8b6fc0675e7c82d2ca37</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa4db25bbe4b95848b64ac55db24badac</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a62cfea0bdbdd10fb977e0eb5cdc4eb7a</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4d739b51b4ec4551ee40a281729c9808</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a30e1ad7f2803f63d1193e730b1972392</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad9893142b378ca2cbe9095653de64b30</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac2246d9905c49ad28b75014a374f0412</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade5d2e09de50c2ca145037f295542b16</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
      <docanchor file="classEigen_1_1DenseBase">MatrixBaseCommaInitRef</docanchor>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3dacded5374fe30f8d4eb4ae18bc87c9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less_equal&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad33bcd208b8415bcd6d1e999bb3abe14</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9691e4affa626dc76fb7696b498d9abf</anchor>
      <arglist>(const ArrayBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a97b38cfe225c9d9979176495f87fc460</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a44845986b4eb5f35e53e61ff8dc47fee</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater_equal&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac6d7c71e57a7de2a7e64bed8f968b562</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Derived, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab642724ec8df57c7351af27f1a8f213b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_pow_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a968854dd9015b8c1ef942c230b173f75</anchor>
      <arglist>(const Scalar &amp;exponent) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6bdcbfa7e3b07d3246ad80de7170b0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afca0e8ff7921ee0e3ab4422818ecb214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0d2cad18a5459a6c98563defff4e3d0f</anchor>
      <arglist>(Index rowFacor, Index colFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6e354bb81f0c7b6888c6a0ce4b4649e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae3a4b984747fa12de0f521b3bff907b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af148c4e77e657d04573c4fda43740ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3af2f03b1d2affcec24e0748edf892cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8a7fd1e8004d4bd93a7ea36957aa8e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaaed9ab0c7a20c689017542e40d1ef6e</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a59df26fd07b401c361f53d84642d73ed</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfc67de2ba1403e6856bd1b7dd1388f9</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a351ca566980cf96d9cdd61f3ce0cf94f</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aca96b3050ceeffaa781d3d4ee185bd1d</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a043485fa5a9510639cd8034392371aec</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a196e62ee8a1fc3b4af631e955d650cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab795c242db18862f502dfd9fa625c504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9053ca03ac251002768a54742be28fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sin_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aeace4917b5449188b24c32c457e5c5e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae9f5fba39401def562700a1cd7b0fd7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_square_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>square</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a51ce605edc09ac87de229f7720a2580d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3a3b3fb530d3364ecef0bf9c9daf0983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_tan_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>tan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3e5e02b55c501fb2304f4b06a34cc3f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Transpose&lt; Derived &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c187c30922fc5e42f208ae3eb0970ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a228b8f9641f46db6e92e06374ea87918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3689faf485a5e405a4fc9bf0e05564c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Derived &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Derived &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af33f695c0e0ad5634ca73f19c347f7b3</anchor>
      <arglist>(Visitor &amp;func) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abb7652b9ae2c6ee26be9db276613c4f6</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa07edf1aa85b7e84bd6b15158efbca71</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa3647a2091ca73b864aee4126118fd44</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a03a4ddf48fc9f3674a783da9c6ae34d8</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3a25508eab3a05851a3b4208b96eb8</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a30ceb9d76f8ca3ff5bc71f7797b9788d</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0e2ccb6cded6a7aa927c3410aee071b</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a138e37f3c338a544afb347aaf80d32da</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae50fd894930b4f917cf5c40f23965f67</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a24025debf13d8352eb963b814e08b5e8</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad148f93a6a00e32ef00903c5393337ef</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adec530c086d6b585ebb009fe4fbb77e6</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2278addf9a3c977d40322571a0df8ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a78061942c4ccb57f5b1dde173fdd8bd0</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f42aba8fbe2618deb0e80e4af876e04</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8e759dafdd9ecc446d397b7f5435f60a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a724349af3e253b69a54d503931b52ec3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a39390955f1297dacb49ac94429f321fd</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2e36721b4833498b713e94a7948c6a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayWrapper</name>
    <filename>classEigen_1_1ArrayWrapper.html</filename>
    <templarg></templarg>
    <base>ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="typedef">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1b110a87160375196234ab5b3aea7e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>abs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab59be4dd3367c1d8c3346f37874c42f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_acos_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>acos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0746d3bd3ca5632b87007e8bae1ad50e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_asin_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>asin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88a7cd6fb70e9546dc1c1c833c2ea4a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a011215bc930d7298944ee5d95a0a3579</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; ArrayWrapper&lt; ExpressionType &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar, NewType &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cos_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a05c41677172ecd1bee69c82a9e14330f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_cube_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cube</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3ab445c58c087ff29b2f4751f24733db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae0ced82e091d512fae815fd75262eb9f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a877ffa7bbed153a1794df6770e991a67</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7af0b2f4acae2de81c82c048f84a83f5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adec5e960b36e3f31fcd2a02d78228f7b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename ArrayWrapper&lt; ExpressionType &gt;::Scalar, typename OtherDerived::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4af6e84f768629f192d6e182a7151f8d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a607a35dda475a4bba6a92f6663bc5c1a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_exp_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6d8c23a6e741fa9dc905f7d69f8d4350</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49544028ab4b11f85bf112d220ad0e05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_log_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abed56aee590f967548b728415047d3af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a534d52e9394efc21d065c79c189b78c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>add2c757190d66c4d10d44b74c07a9e0f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa8db4eae3f8e53058f719953af9ade53</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a916d59a95c3ac1784b4ee7fd35c1638d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acac79e1e55e72414bfa84349d19e2a74</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9a5a8d0dc02cd4e1649d641081ba925c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>afce9cebae4c9cbb9883e73d515b5570f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename ArrayWrapper&lt; ExpressionType &gt;::Scalar, typename OtherDerived::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba947e9f968d8c304e320a6adfa11f58</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0c5fe5b14df6c536815de786f5d5e12a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49b9b40206fe10320613f469b72e35bf</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa4db25bbe4b95848b64ac55db24badac</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a62cfea0bdbdd10fb977e0eb5cdc4eb7a</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a30e1ad7f2803f63d1193e730b1972392</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac2246d9905c49ad28b75014a374f0412</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::less_equal&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad33bcd208b8415bcd6d1e999bb3abe14</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a97b38cfe225c9d9979176495f87fc460</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a44845986b4eb5f35e53e61ff8dc47fee</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::greater_equal&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac6d7c71e57a7de2a7e64bed8f968b562</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab642724ec8df57c7351af27f1a8f213b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_pow_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a968854dd9015b8c1ef942c230b173f75</anchor>
      <arglist>(const Scalar &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sin_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aeace4917b5449188b24c32c457e5c5e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae9f5fba39401def562700a1cd7b0fd7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_square_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>square</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a51ce605edc09ac87de229f7720a2580d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_tan_op&lt; Scalar &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>tan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3e5e02b55c501fb2304f4b06a34cc3f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const ArrayWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::ArrayXpr</name>
    <filename>structEigen_1_1ArrayXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::BiCGSTAB</name>
    <filename>classEigen_1_1BiCGSTAB.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae044142449c071af13afc4fbbe633682</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>abda58f5b65579cb046bcb158cc356013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>abf2413ba65486c26becf303054d6ec12</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a693a8142a905e7130bacd77586a6f6a0</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a736349b3462f6ebf37c34b450db2ed18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ab837a9d99eea1f79dd4721727ef98d37</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a07c5f1fe9fa1556edc79452b52839829</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a9c020a2e26d3081eeff611b802962530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae4bec7fa55f17f7bb64b6b2fc4039b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a11aed1f82ecbec6d7436915c6d804d7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ad9aa2f8ecfda11aba72cfd3c5eefae20</anchor>
      <arglist>(int maxIters)</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a39b43ecdc61211a15d1e986e28a03513</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acae1088225b7c746b16848d02d5e1c2a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; IterativeSolverBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7892f6fbc52bfa658e1324a63d376d1c</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval_with_guess&lt; BiCGSTAB, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>ac6991ac0f70dd889f55ebc0f287c04f2</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>aab135f12fadf495a511f20c71557e1aa</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Block</name>
    <filename>classEigen_1_1Block.html</filename>
    <templarg>XprType</templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>aa2e498fcabce35cbd29bc520af996fa0</anchor>
      <arglist>(XprType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a15092ab44ebcdd5a86f8c615b4da6318</anchor>
      <arglist>(XprType &amp;xpr, Index a_startRow, Index a_startCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>ae9850d0b93672cbf7d06d73507b5c5be</anchor>
      <arglist>(XprType &amp;xpr, Index a_startRow, Index a_startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BlockImpl&lt; XprType, BlockRows, BlockCols, InnerPanel, Sparse &gt;</name>
    <filename>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</filename>
    <templarg></templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <base>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</base>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae762210a1ab89bed1673edc09a6ec8b7</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>ac965517d0ed273e3f276e0520fabcafd</anchor>
      <arglist>(const XprType &amp;xpr, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>ac7ddc1c596ed1b16486149b770b3e920</anchor>
      <arglist>(const XprType &amp;xpr, int startRow, int startCol, int blockRows, int blockCols)</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::Scalar, NewType &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>a3cefa469a7524d4bbc80531ebb9b5df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbeb71e12bd4e65d20afd183ad962735</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4e2ff39353ad89db50ddf3dd7b52018</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f6c61e2de38668bc29d07360de3a89</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74a7586c8f5f2431fb3d66f7e534621c</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;::Scalar, typename OtherDerived::Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2664016e0a9629a181b822539485cfe3</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada4f791903d6f53f5b167ea5cbcee6a0</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a571c36d7211bd03dd1a06ac46c002fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const SparseDenseProductReturnType&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a944ff62beed1d6592b09a9cc3d77141c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2e4176a905b94907cf32dfe70a4bd1b</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2151bafac84e57f1ab0804ceb4095095</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>a48cdd99e4e82f74c1adae2bd69970220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a21092ba41e46066d1f128b38cdbdbbed</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const DenseSparseProductReturnType&lt; OtherDerived, Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d9b4ebc3f049fda2ff673f8bc4668d3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodBase</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a2a4ffc9577cb0e860a22a145593b745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>acdc1509616c36e6dfbf4eeaac4f6f473</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab2efe8546d442e79f9c3f574adab5d5e</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a4cc20d34149422380d332ddd1d371652</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a81db76105fedf365cdbc200774911847</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodDecomposition</name>
    <filename>classEigen_1_1CholmodDecomposition.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a2a4ffc9577cb0e860a22a145593b745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>acdc1509616c36e6dfbf4eeaac4f6f473</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab2efe8546d442e79f9c3f574adab5d5e</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a4cc20d34149422380d332ddd1d371652</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a81db76105fedf365cdbc200774911847</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLDLT</name>
    <filename>classEigen_1_1CholmodSimplicialLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a2a4ffc9577cb0e860a22a145593b745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>acdc1509616c36e6dfbf4eeaac4f6f473</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab2efe8546d442e79f9c3f574adab5d5e</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a4cc20d34149422380d332ddd1d371652</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a81db76105fedf365cdbc200774911847</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLLT</name>
    <filename>classEigen_1_1CholmodSimplicialLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a2a4ffc9577cb0e860a22a145593b745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>acdc1509616c36e6dfbf4eeaac4f6f473</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab2efe8546d442e79f9c3f574adab5d5e</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a4cc20d34149422380d332ddd1d371652</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a81db76105fedf365cdbc200774911847</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSupernodalLLT</name>
    <filename>classEigen_1_1CholmodSupernodalLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a2a4ffc9577cb0e860a22a145593b745f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>acdc1509616c36e6dfbf4eeaac4f6f473</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab2efe8546d442e79f9c3f574adab5d5e</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a4cc20d34149422380d332ddd1d371652</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; CholmodBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a81db76105fedf365cdbc200774911847</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::COLAMDOrdering</name>
    <filename>classEigen_1_1COLAMDOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1COLAMDOrdering.html</anchorfile>
      <anchor>ac34b06dbd6ced375bdcafe85f0ccd3e4</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ColPivHouseholderQR</name>
    <filename>classEigen_1_1ColPivHouseholderQR.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a2bb8fa5593d2f447c16ba2e3cfb9c432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a72f7fb8c1359fa8d9743068e5699228e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a4a15f3e5e33478b9969d8c71aabd09ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ac93cc6a4fd4247486c2c8eab79b4c0ad</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a1229744f4e8554ca6e96fe32ac359924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a812205d31cae2005b7779c7a3a442f1b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a7c6323871c4f080fc6e2d3ad7fc607fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a321e96844544eacde2272c3a487048e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a97150efba7e2da32f48a7f823f047a89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; ColPivHouseholderQR, typename MatrixType::IdentityReturnType &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a3021b1285c868ef94b26f387766bdf92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a1e119085e53eca65e9ba15451c102d40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ab60c7d993c9eba31668fb8886d621094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5968b9ca46303b3cc7250e7b120ab7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a82a3f15f0cda1f4f874d50951344b5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a7b142db8924dd7fad99acbdd0ff4bdd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a84cd3aba44220008bdbd81506703de37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a067e9d4143ce0558fc684b736128a4ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a6dda9285f13dec9f49e9c17229a89988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5631914aef48f4f719789c823edacb2c</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a446f775405186b238f20bd092fd107a6</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; ColPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>afbe1cd1202964011ae7e7411577749a0</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aa5a87faaa92a3081045d1f934e292ef0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CommaInitializer</name>
    <filename>structEigen_1_1CommaInitializer.html</filename>
    <templarg>XprType</templarg>
    <member kind="function">
      <type>XprType &amp;</type>
      <name>finished</name>
      <anchorfile>structEigen_1_1CommaInitializer.html</anchorfile>
      <anchor>a1f065adc0c5e868f62cea827286f6d40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexEigenSolver</name>
    <filename>classEigen_1_1ComplexEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a1b9bc0a45616064df3a6168395e3cfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;(~RowMajor), MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a1bacc53058a77ef90a61b1f24eac57ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ab56d974ddc62e97452c463987159c040</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>aeb6c0eb89cc982629305f6c7e0791caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a6df2ea6989cb34f6febf45c6a961560f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a24a667e12f56defc879c90eee4ba1971</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>af7c9eab1a5d3a2b3a6acdf599b917953</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a5c53421aa899f6214349c62bad5f36f8</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a1165fd63a951c6afaf239174d22e9945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EigenvectorType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a810ff7d8ff9ee9bfc5641d4f3f904eb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ab6f0a63ea1d26cef5e748207043eb43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3b1b6c1fccb22b96c7ecc6d8c0a11a1e</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexSchur</name>
    <filename>classEigen_1_1ComplexSchur.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>ComplexMatrixType</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a1333fc417f8ad137effb6a7f751337e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a1b9bc0a45616064df3a6168395e3cfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9ba3a59c1e385a4a5a80c08bf40f8fd1</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic?1:RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a797849e56b60a3cb8f80ac23e3eb73f9</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>af6c75391a881ca5e56d9aac55f838e21</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a45511576d26e39bc6233d2ce1f14a585</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ab6f0a63ea1d26cef5e748207043eb43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a868f6394b0c189a3ee3be039d9108095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a6a4f89228ca0a093f34029706fd13aeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a8178c4999e63b2bfbdc424ff84a91b10</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>afdafb24d67af7529bb903a4c9bff3ea4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ConjugateGradient</name>
    <filename>classEigen_1_1ConjugateGradient.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae044142449c071af13afc4fbbe633682</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a693a8142a905e7130bacd77586a6f6a0</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>a34c867de253fb883fe0d7b64ffc54add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>a5436d7b00b1748b958d6f114ef3a2ad6</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a736349b3462f6ebf37c34b450db2ed18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ab837a9d99eea1f79dd4721727ef98d37</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a07c5f1fe9fa1556edc79452b52839829</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a9c020a2e26d3081eeff611b802962530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae4bec7fa55f17f7bb64b6b2fc4039b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a11aed1f82ecbec6d7436915c6d804d7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ad9aa2f8ecfda11aba72cfd3c5eefae20</anchor>
      <arglist>(int maxIters)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a39b43ecdc61211a15d1e986e28a03513</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acae1088225b7c746b16848d02d5e1c2a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; IterativeSolverBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7892f6fbc52bfa658e1324a63d376d1c</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval_with_guess&lt; ConjugateGradient, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>a6cbe08072f2a7f73c1419da016b7b54d</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>aab135f12fadf495a511f20c71557e1aa</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseBinaryOp</name>
    <filename>classEigen_1_1CwiseBinaryOp.html</filename>
    <templarg>BinaryOp</templarg>
    <templarg>Lhs</templarg>
    <templarg>Rhs</templarg>
    <member kind="function">
      <type>const BinaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>a68352f5aafc1901780b836d8fa21b7b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const _LhsNested &amp;</type>
      <name>lhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>a1ab2b47535692481285a998525d0c646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const _RhsNested &amp;</type>
      <name>rhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>a3483b038d185d8b507d26104094c5996</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseNullaryOp</name>
    <filename>classEigen_1_1CwiseNullaryOp.html</filename>
    <templarg>NullaryOp</templarg>
    <templarg>PlainObjectType</templarg>
    <member kind="function">
      <type>const NullaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseNullaryOp.html</anchorfile>
      <anchor>a9bc72d9d013618de757356ed596911ec</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryOp</name>
    <filename>classEigen_1_1CwiseUnaryOp.html</filename>
    <templarg>UnaryOp</templarg>
    <templarg>XprType</templarg>
    <member kind="function">
      <type>const UnaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a7722c34f4e6f9e43d9dc374e6157f224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; typename XprType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a070213b3e875653316258530a582255b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::remove_all&lt; typename XprType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a53c7706fa7c60b8a92bb5cb6c9c6d41d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryView</name>
    <filename>classEigen_1_1CwiseUnaryView.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const ViewOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>a0530653218531fc9a9444de935b656f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; typename MatrixType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>a6e103ceb35c366db1f6da2e010618160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::remove_all&lt; typename MatrixType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>a9cafb8a7b4fce330af145a175501293a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::Dense</name>
    <filename>structEigen_1_1Dense.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseBase</name>
    <filename>classEigen_1_1DenseBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea38ab482a62bf46f6ed6dcc4e9dd0dddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eae943bdba893721a848dfcd03db756b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eab30be5c02d7a124ec165d2ab6c5b05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea1264a9a69c437cbe0f8e723d88471c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eac9998fd25639e32ba4d58d67bfff4420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eacf4ecb7db5a851c1ff90ae7621ab3fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea7e22277c8f0a1a76dd0d6c62e366b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea96296863b401484bc191339414c90e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea247b0f8b0eb0bfd5e253eb1e4b61436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea17c43b803133ba4f73b417edcbfb8206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aea914316af61df197f21629e14e7870a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac1dba91a5de689327121c20af5a5c18a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a42571e028736ca9103bac8b50f269824</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a49a617f24129ca31a27fe8a67ec20370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe7ae69362c464b6721adbb47c655874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa671b5ea336ba21a7644d3fa6577ee00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a98692bec8f3d859f1e7a60eab87ac571</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Flagged&lt; Derived, Added, Removed &gt;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afcbba97b05d9a88657783dfc4f931f3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Derived &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa364b60e6a2a124ea7392e4c0550fb4e</anchor>
      <arglist>(const IOFormat &amp;fmt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa867b1db3fb2dd56e7072c7684960ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a158c2184951e6e415c2e9b98db8e8966</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed2515d3d813e1355933b6e0def44640</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a045c430069e53c7589e71fcc6984c8a8</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40b9e8df68a52b2d46cf70c9babf2a16</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaa59b5a40da397d905789cf99bce18d5</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a34b4423fdfdf0c0644268095c55fe6ea</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6dc0eb069536157ead1d46c660b9622d</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878f0dae18b28d8158c5f1c232edced2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aad851ef369d212dcea81d9cded12dbdd</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b381dbcb0435c3a34a78abad4726cc3</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0af2b3991862a079e3efaef3e4d17d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add6cb2d85282829eb9adc9565ce784d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad927d600371ba16dcb44518530ba906a</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae959fb7401b9cfdf900ff3b295466526</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Derived &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a324b9263b40738a260d46ff011b8d31b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade5d2e09de50c2ca145037f295542b16</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
      <docanchor file="classEigen_1_1DenseBase">MatrixBaseCommaInitRef</docanchor>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3dacded5374fe30f8d4eb4ae18bc87c9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab66e9094f443151c6bf7f51073dc847c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac82120124dd9bee9c633f8cc79adf1c5</anchor>
      <arglist>(const DenseBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acde54311cdc2b5731a6d27f7a5f7ad1b</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6bdcbfa7e3b07d3246ad80de7170b0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afca0e8ff7921ee0e3ab4422818ecb214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0d2cad18a5459a6c98563defff4e3d0f</anchor>
      <arglist>(Index rowFacor, Index colFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6e354bb81f0c7b6888c6a0ce4b4649e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae3a4b984747fa12de0f521b3bff907b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af148c4e77e657d04573c4fda43740ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3af2f03b1d2affcec24e0748edf892cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8a7fd1e8004d4bd93a7ea36957aa8e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaaed9ab0c7a20c689017542e40d1ef6e</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a59df26fd07b401c361f53d84642d73ed</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfc67de2ba1403e6856bd1b7dd1388f9</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a351ca566980cf96d9cdd61f3ce0cf94f</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aca96b3050ceeffaa781d3d4ee185bd1d</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a043485fa5a9510639cd8034392371aec</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a196e62ee8a1fc3b4af631e955d650cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab795c242db18862f502dfd9fa625c504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9053ca03ac251002768a54742be28fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3a3b3fb530d3364ecef0bf9c9daf0983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Transpose&lt; Derived &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c187c30922fc5e42f208ae3eb0970ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a228b8f9641f46db6e92e06374ea87918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3689faf485a5e405a4fc9bf0e05564c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af33f695c0e0ad5634ca73f19c347f7b3</anchor>
      <arglist>(Visitor &amp;func) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abb7652b9ae2c6ee26be9db276613c4f6</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa07edf1aa85b7e84bd6b15158efbca71</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa3647a2091ca73b864aee4126118fd44</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a03a4ddf48fc9f3674a783da9c6ae34d8</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3a25508eab3a05851a3b4208b96eb8</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a30ceb9d76f8ca3ff5bc71f7797b9788d</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0e2ccb6cded6a7aa927c3410aee071b</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a138e37f3c338a544afb347aaf80d32da</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae50fd894930b4f917cf5c40f23965f67</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a24025debf13d8352eb963b814e08b5e8</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad148f93a6a00e32ef00903c5393337ef</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adec530c086d6b585ebb009fe4fbb77e6</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2278addf9a3c977d40322571a0df8ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a78061942c4ccb57f5b1dde173fdd8bd0</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f42aba8fbe2618deb0e80e4af876e04</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8e759dafdd9ecc446d397b7f5435f60a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a724349af3e253b69a54d503931b52ec3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a39390955f1297dacb49ac94429f321fd</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2e36721b4833498b713e94a7948c6a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseBase</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3b8fc30be9df1cce5462cb8c09fe5e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2ceee1b50ae09d3fbaf267e387d361c5</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a5167713063d62bd25f829326ce786f1d</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a925992fe6fbc1a2eeb9606922f3e4a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>ad2488d3aa47376b9f302eb451d7bb214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afe8b8d098bee05012ae2eb95e0621323</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a26ecddb760396e3896d153303d61bf91</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af6666407e9e8c184e57c7f9cef8a6bd2</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>ab512ffb30fd08bcc2d067f231b789744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a7ca5c508858025586d797a5e081dd2a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ae40e6f2fe318262ca13a28a1a1099480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3a114a22efbefc25015488b6b16cba04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a01138c0dd664b44c047d7192b58fc482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac875a7c4b5c65a252d15e1e1c1d12712</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2ceee1b50ae09d3fbaf267e387d361c5</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a5167713063d62bd25f829326ce786f1d</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a4386da578a119f7b500d0b22cab2de0e</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ac6b7130eb06fa3164c4686d9fb9a795a</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a925992fe6fbc1a2eeb9606922f3e4a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ad2488d3aa47376b9f302eb451d7bb214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afe8b8d098bee05012ae2eb95e0621323</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a26ecddb760396e3896d153303d61bf91</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ac40b13c3b1b753f4f6aa8c6885eec706</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a37b6edee6eb913008ff3699d767b7c56</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af6666407e9e8c184e57c7f9cef8a6bd2</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ab1bdb54bf6a7275b74ff3b99b301c745</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ab512ffb30fd08bcc2d067f231b789744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a7ca5c508858025586d797a5e081dd2a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ae40e6f2fe318262ca13a28a1a1099480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3a114a22efbefc25015488b6b16cba04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a01138c0dd664b44c047d7192b58fc482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac875a7c4b5c65a252d15e1e1c1d12712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2ceee1b50ae09d3fbaf267e387d361c5</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a5167713063d62bd25f829326ce786f1d</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afe8b8d098bee05012ae2eb95e0621323</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a26ecddb760396e3896d153303d61bf91</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af6666407e9e8c184e57c7f9cef8a6bd2</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ae40e6f2fe318262ca13a28a1a1099480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3a114a22efbefc25015488b6b16cba04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a01138c0dd664b44c047d7192b58fc482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac875a7c4b5c65a252d15e1e1c1d12712</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2ceee1b50ae09d3fbaf267e387d361c5</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a5167713063d62bd25f829326ce786f1d</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a4386da578a119f7b500d0b22cab2de0e</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ac6b7130eb06fa3164c4686d9fb9a795a</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afe8b8d098bee05012ae2eb95e0621323</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a26ecddb760396e3896d153303d61bf91</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ac40b13c3b1b753f4f6aa8c6885eec706</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a37b6edee6eb913008ff3699d767b7c56</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af6666407e9e8c184e57c7f9cef8a6bd2</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ab1bdb54bf6a7275b74ff3b99b301c745</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ae40e6f2fe318262ca13a28a1a1099480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3a114a22efbefc25015488b6b16cba04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a01138c0dd664b44c047d7192b58fc482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac875a7c4b5c65a252d15e1e1c1d12712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Diagonal</name>
    <filename>classEigen_1_1Diagonal.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>_DiagIndex</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalMatrix</name>
    <filename>classEigen_1_1DiagonalMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a5d4b7841785131ea29034f1eb2aa1c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a2587b9e1b9f7414420167f80085eeece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ae6c8108909e7d4a047624d94b6569272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ad7c7c8a9472b3010941acb756e12e235</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a68e4e1da4214fd0f2254554136ac19b0</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a74eca46f4de32552d52e2f978cf9ff32</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a02e7d0a935cc7f66c18247ec399d490c</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ae931ff7bb54e0687cadcb32cbffb5cea</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>af799ddbd7255a565b8a4554ce455c2cc</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a0b8db206b78137e95dc0833952ed1ed0</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a0d6c3adf952f7d034124bf08c7d0f822</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a47affd1a10b589811fc4828c1a2e0c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a4bae7fbd7549cf23ac6b51a5c57d90d8</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalPreconditioner</name>
    <filename>classEigen_1_1DiagonalPreconditioner.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalWrapper</name>
    <filename>classEigen_1_1DiagonalWrapper.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>a5d4b7841785131ea29034f1eb2aa1c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalWrapper</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>a225f7b45fa6b7b3a81416d9e7cdba5cb</anchor>
      <arglist>(DiagonalVectorType &amp;a_diagonal)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::EigenBase</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EigenSolver</name>
    <filename>classEigen_1_1EigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a1b9bc0a45616064df3a6168395e3cfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a62dc35c9c355abf830869b1bad883c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a50d070013a795db5621119f2b4a3d781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aeb6c0eb89cc982629305f6c7e0791caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a0e257dae8f1774fdda178482caa65be8</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a838424bc2f923e06e7690965bf6d7769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>af3bf2ce4a17b33b9e298170677f2f0c0</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a8c287af80cfd71517094b75dcad2a31b</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a1165fd63a951c6afaf239174d22e9945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EigenvectorsType</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a3236af3afbc89241aaed4fc868aa8435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>ab6f0a63ea1d26cef5e748207043eb43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>pseudoEigenvalueMatrix</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4140972e2b45343d1ef1793c2824159c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>pseudoEigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a3b6c3b38f50c2372de195ff955a4e02d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>ab70fdf436af2c43b7174e2981f618fb3</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ForceAlignedAccess</name>
    <filename>classEigen_1_1ForceAlignedAccess.html</filename>
    <templarg>ExpressionType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivHouseholderQR</name>
    <filename>classEigen_1_1FullPivHouseholderQR.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a2bb8fa5593d2f447c16ba2e3cfb9c432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a1229744f4e8554ca6e96fe32ac359924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aa414ed474b31fecd794cb33003da65d5</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a7c6323871c4f080fc6e2d3ad7fc607fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>acc93f6afaf0d058c8c1e242b3276977a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a8a9705034ce6895c61fe9d0b026837b1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a8df275c9896e2585fe5748512fca8e8f</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a321e96844544eacde2272c3a487048e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; FullPivHouseholderQR, typename MatrixType::IdentityReturnType &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a6c4acc52d7014703cc351dcdc3538b9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a1e119085e53eca65e9ba15451c102d40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ab60c7d993c9eba31668fb8886d621094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a5968b9ca46303b3cc7250e7b120ab7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a82a3f15f0cda1f4f874d50951344b5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixQReturnType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a455514157d49695dadaf7dc534fe9ced</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a7b142db8924dd7fad99acbdd0ff4bdd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a067e9d4143ce0558fc684b736128a4ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a6dda9285f13dec9f49e9c17229a89988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntDiagSizeVectorType &amp;</type>
      <name>rowsTranspositions</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a5f1dd0ff830259594be737e856a27baf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a559f82325764bd1e204fc6f56ba1a145</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>acbb58557944348658f9a88afa60b6b2b</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; FullPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a56ecc85ee98ff3625d222fdee1774b73</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aa5a87faaa92a3081045d1f934e292ef0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivLU</name>
    <filename>classEigen_1_1FullPivLU.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ac1c60e27ca149bb599662fb554a0949a</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; MatrixType &gt;::Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aa47f041dae554fe1f135e2794ae914a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a7c6323871c4f080fc6e2d3ad7fc607fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a10dec2fa1767ac0712af1efa732b2046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab6c78ecd953ba165ef421fa67c05753a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab66f95f8f6b6455a0a38d95486330808</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const internal::image_retval&lt; FullPivLU &gt;</type>
      <name>image</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ad854843c6dc601252dc107e7b29133e9</anchor>
      <arglist>(const MatrixType &amp;originalMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; FullPivLU, typename MatrixType::IdentityReturnType &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a5ca20e3802e96fb14c2be37039afcae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a1e119085e53eca65e9ba15451c102d40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab60c7d993c9eba31668fb8886d621094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a5968b9ca46303b3cc7250e7b120ab7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::kernel_retval&lt; FullPivLU &gt;</type>
      <name>kernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a6e8f1d2fcbd86d3dc5a8a013b6e7200a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ad69664a62ab4d3026566d0d4a261b187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a067e9d4143ce0558fc684b736128a4ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a6dda9285f13dec9f49e9c17229a89988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationPType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a38416f9985b9c7ad9dc3bd355479dd67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationQType &amp;</type>
      <name>permutationQ</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ae85e85c3d1488b5882a6ccd63678a4d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ac36925ac693435a090efee1cb5d6d16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ae47399e3cf7943075ce18ef89fe17f21</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a02b74b9b823e060825443fd82cd25fd4</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; FullPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ac1a642d728c059c7625863f126e2e718</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aa5a87faaa92a3081045d1f934e292ef0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedEigenSolver</name>
    <filename>classEigen_1_1GeneralizedEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a1b9bc0a45616064df3a6168395e3cfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>ComplexVectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a12de5e55557c63e5efaa70c3d4e82060</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; ComplexScalar, Scalar &gt;, ComplexVectorType, VectorType &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a14f2d5bf9df5a70ea27bc1239aa30822</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a50d070013a795db5621119f2b4a3d781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>aeb6c0eb89cc982629305f6c7e0791caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ae88654b9613217486067f07e394c88dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ComplexVectorType</type>
      <name>alphas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ade79c282ebff0a23829fd9b9b18fe1c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>betas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a92c089793f883fd38cd2df4d7c6513e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a64e32bd0f28bb7b6e91775c3ac592e12</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>EigenvalueType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>acffd08bee548eaa5c10414343a93529f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a7289bdfc65bb36b51babcab21a1a9c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ad454c37be646409992625586d2b21adb</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>aa0f561be93f959404ee232321b389468</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>af6db2eac907628bd50de67a4ede88a5a</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedSelfAdjointEigenSolver</name>
    <filename>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</filename>
    <templarg></templarg>
    <base>Eigen::SelfAdjointEigenSolver</base>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>acb5c3dc237f99cf17167e8a629f01b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::plain_col_type&lt; MatrixType, RealScalar &gt;::type</type>
      <name>RealVectorType</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a4e33b38d1980864e689a8a1c01b782dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GeneralizedSelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>aaa204ef15aaefac270c0376269083ed6</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>aff6f3679ffb0098b33ccdefd4c5aaf33</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeDirect</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a85cda7e77edf4923f3fc0512c83f6323</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>af54b25fe7d2a3f578269381e9e5592a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a647a30aac0c6bb3def117dfb5ce90035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a47cdb96ef5b357fb03a3941431027701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>ab31ca021816541f77cb5f067a93b604a</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a187d246e7119473853734270c6bf6e5d</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorInverseSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a811ad0873e06be5404fc91f64f0f658d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>add23e44f8a7f540c288ee98b2d2b0775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterations</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>adc66cd724d769ca37c38bc5ecb06dd87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HessenbergDecomposition</name>
    <filename>classEigen_1_1HessenbergDecomposition.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</type>
      <name>CoeffVectorType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a1ed77f58452b7e53d18f2532e1763b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aa96bdbc1b19c647e3372c31301ea4999</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aeb6c0eb89cc982629305f6c7e0791caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HessenbergDecomposition &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a6e877604e408f4ca174fb489a329c03e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a6a2313f1b3b5438f3ef622c5a6763390</anchor>
      <arglist>(Index size=Size==Dynamic?2:Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a5f1aa26a2c7a68fedb5f201912df9128</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const CoeffVectorType &amp;</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a31170fe84e15e60baf72142b2b585fa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixHReturnType</type>
      <name>matrixH</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aea9518787b9570535e44a3f4ac7a66ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>ad13845d7490115664924b3dc208ec369</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a66adece364b64b26b3771662de70f2df</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Homogeneous</name>
    <filename>classEigen_1_1Homogeneous.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>_Direction</templarg>
    <base>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</base>
    <member kind="typedef">
      <type>internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Scalar, internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::RowsAtCompileTime, internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Flags &amp;RowMajorBit?RowMajor:ColMajor), internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac33495a0e3788e5951670c392b44d9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4545be7a9af33ba337a4ebb0101395fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac00eb88e0d7599b8a2881715d3e4b35f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Homogeneous&lt; MatrixType, _Direction &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Scalar, NewType &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2373e043b49396e152523e85b0a2ace8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa1a53029c0ee62fb8875ce3c12151eda</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afc17a621f5682e6eba6a1c439174d550</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac3f5276480c741953c66498a078ecd30</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Homogeneous&lt; MatrixType, _Direction &gt;::Scalar, typename OtherDerived::Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae759f49ab64f4d454e591bf610a09156</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa36bff7d4e9186e4fbed250b15ad9e36</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a41c29f54b9da54e37fbe1756a0da7013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5648a35b9610ad47cb01912752db1dae</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32e1169b1338aa7edcc9a2dd69882ede</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2dab56059c2cd13fd3b36668a58fc1ac</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a78f22189db1a4cc4634bb8427ae64f06</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Homogeneous&lt; MatrixType, _Direction &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderQR</name>
    <filename>classEigen_1_1HouseholderQR.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a2bb8fa5593d2f447c16ba2e3cfb9c432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderQR &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a5851b8e7d2a7f91592e7fa69f8b7684c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a321e96844544eacde2272c3a487048e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a520fc76215d7722387a76e7b7a484ee0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ab7e9b80266fe7d1592e4c9de652d9f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>abf25ea0833fe1e846c20968103f69141</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ab592f6a05d7ba94c0108382baa8c993e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a82a3f15f0cda1f4f874d50951344b5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a7b142db8924dd7fad99acbdd0ff4bdd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; HouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a3912046746c14d7b4e9dba999da46a68</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderSequence</name>
    <filename>classEigen_1_1HouseholderSequence.html</filename>
    <templarg>VectorsType</templarg>
    <templarg>CoeffsType</templarg>
    <templarg>Side</templarg>
    <base>EigenBase&lt; HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &gt;</base>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a5dc0922b29ae5e2a867cff75cbf7ac1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EssentialVectorType</type>
      <name>essentialVector</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>aaeaaa79416e82ffed90e36543cc1f564</anchor>
      <arglist>(Index k) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a3202eb0eaf16ad05ef90ca741bbf1cbc</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a17449d69230251d4fdcf3e43a1b3ddda</anchor>
      <arglist>(const HouseholderSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ad13f4e783d2a24b55b5280e0a9096df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>length</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ab03433b49fb0a856a189b52c61f4872d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::matrix_type_times_scalar_type&lt; Scalar, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a6abbb28d5386d39fc294ab8b5ead5375</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setLength</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a11ea4599a61fff6b27734e4dc31f2701</anchor>
      <arglist>(Index length)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>af60a8214544812a06d520bd6605c539b</anchor>
      <arglist>(Index shift)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>shift</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a83a0b0137bca9a5429116067ca0a1e0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a675ccc58e030cd6a2f43864257737ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HouseholderSequence &amp;</type>
      <name>setTrans</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a10457dacb3949bc6dd5001878641819e</anchor>
      <arglist>(bool trans)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>trans</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a60112ec072cfadceb8e909715cc33a1c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Hyperplane</name>
    <filename>classEigen_1_1Hyperplane.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_AmbientDim</templarg>
    <templarg>_Options</templarg>
    <member kind="function">
      <type>Scalar</type>
      <name>absDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a8383bb22fa5f6024856f2c781f6ec0db</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Hyperplane, Hyperplane&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ad8e93f5ebbfdfeaafbdce587c389c26b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a67d7e844f940f6ca2673eadacaf08b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a1617ce16af4ff4c65d2155848f2ea161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a8809dd8f7c45e11b3f62c3fcf0175e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>af5da8814bd3fb91f730302692c736069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>acd150a51ba003162b7a3d919b6b11341</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ad3ab0f5ce565bb0561e5dd3d82358c0e</anchor>
      <arglist>(const VectorType &amp;n, const VectorType &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a16de15865999fc85f912727fdaaa16f2</anchor>
      <arglist>(const VectorType &amp;n, const Scalar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a7e93264afdcb9e5e762413df10bad3dd</anchor>
      <arglist>(const ParametrizedLine&lt; Scalar, AmbientDimAtCompileTime &gt; &amp;parametrized)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a079adfa5d26ae1f00de7f756a0d2c00b</anchor>
      <arglist>(const Hyperplane&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ad10ca15c93ee4d825f92a2c4563ed678</anchor>
      <arglist>(const Hyperplane &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae3f0cc3141ee484c2e1a8a391a47c624</anchor>
      <arglist>(const Hyperplane&lt; Scalar, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>ConstNormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ace24c10a33475a675f45cfbf085378ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a115e276ad412ed6378e3291095132591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a7494eb6e7ee0d104f3a01dcceed8607a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a32ddf277ab2a650e7d520bcbbc09fb99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a12c3df61f19531230e282a879b605842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ac93039c47cde2b60b29d99f3e1a7dc71</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signedDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aacd139793b951a521e0e5147a4793d9c</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a35877b483d288e5c4569163b41e79ecc</anchor>
      <arglist>(const MatrixBase&lt; XprType &gt; &amp;mat, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae5243c6aa230fcd95572c3a99cdd014d</anchor>
      <arglist>(const Transform&lt; Scalar, AmbientDimAtCompileTime, Affine, TrOptions &gt; &amp;t, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a10fad5ae000f23b20ebc9e54ed7202dd</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aabfcda23a80edfd62387bb3d930f4b96</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1, const VectorType &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IdentityPreconditioner</name>
    <filename>classEigen_1_1IdentityPreconditioner.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::IncompleteLUT</name>
    <filename>classEigen_1_1IncompleteLUT.html</filename>
    <templarg></templarg>
    <class kind="struct">Eigen::IncompleteLUT::keep_diag</class>
    <member kind="function">
      <type>IncompleteLUT&lt; Scalar &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>acb5eacde7eef2117f27460a93890894d</anchor>
      <arglist>(const MatrixType &amp;amat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDroptol</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a14211b3c36a5e783813d41524e0309e6</anchor>
      <arglist>(const RealScalar &amp;droptol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillfactor</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a8d520cb344dd5c3944c811b357fea77f</anchor>
      <arglist>(int fillfactor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::IncompleteLUT::keep_diag</name>
    <filename>structEigen_1_1IncompleteLUT_1_1keep__diag.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::InnerStride</name>
    <filename>classEigen_1_1InnerStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; 0, Value &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a5097377018539728197eae1e9a226675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>addf96940f832bc716e6a8c1e9e362348</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IOFormat</name>
    <filename>structEigen_1_1IOFormat.html</filename>
    <member kind="function">
      <type></type>
      <name>IOFormat</name>
      <anchorfile>structEigen_1_1IOFormat.html</anchorfile>
      <anchor>a2cfedae142c169cc3ccd8c7dd53e04a7</anchor>
      <arglist>(int _precision=StreamPrecision, int _flags=0, const std::string &amp;_coeffSeparator=&quot; &quot;, const std::string &amp;_rowSeparator=&quot;\n&quot;, const std::string &amp;_rowPrefix=&quot;&quot;, const std::string &amp;_rowSuffix=&quot;&quot;, const std::string &amp;_matPrefix=&quot;&quot;, const std::string &amp;_matSuffix=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IterativeSolverBase</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae044142449c071af13afc4fbbe633682</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a693a8142a905e7130bacd77586a6f6a0</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a736349b3462f6ebf37c34b450db2ed18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ab837a9d99eea1f79dd4721727ef98d37</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a07c5f1fe9fa1556edc79452b52839829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5140d3e2be1561de7f003504ef1be45d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a81b1c0c3c9d19709b15e03a47ea90ef0</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a9c020a2e26d3081eeff611b802962530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae4bec7fa55f17f7bb64b6b2fc4039b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a11aed1f82ecbec6d7436915c6d804d7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ad9aa2f8ecfda11aba72cfd3c5eefae20</anchor>
      <arglist>(int maxIters)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a39b43ecdc61211a15d1e986e28a03513</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acae1088225b7c746b16848d02d5e1c2a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; IterativeSolverBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7892f6fbc52bfa658e1324a63d376d1c</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>aab135f12fadf495a511f20c71557e1aa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiRotation</name>
    <filename>classEigen_1_1JacobiRotation.html</filename>
    <templarg>Scalar</templarg>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>acf21a38021bf2100bb50268a166317f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a5700212c7e79eccd3cde8b07d6816e9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a7999227436ed5e6bbe679fd40564abf1</anchor>
      <arglist>(const Scalar &amp;c, const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGivens</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a459c7bb56a9862bc2b66d03070b4a3e0</anchor>
      <arglist>(const Scalar &amp;p, const Scalar &amp;q, Scalar *z=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a7349f180eaab3d2b4c654b32a41f8932</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;, typename Derived::Index p, typename Derived::Index q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>aa44fbe850470b9f08adceff2655decdf</anchor>
      <arglist>(const RealScalar &amp;x, const Scalar &amp;y, const RealScalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a693f65729440b5c31feb6d86d1b075d1</anchor>
      <arglist>(const JacobiRotation &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a535dd93be32736dbe23a201c33c279d7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiSVD</name>
    <filename>classEigen_1_1JacobiSVD.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>QRPreconditioner</templarg>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a2c4a669a1daef0b1ab3ee4e13ae85ca3</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a162bb9d58d096027d49aa929fcf1bcd9</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a1ffab6aab715fe0918a841611a95e9aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a92e99646eefbeb071ef220841555a703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a0e963136a69da877ff06f27e7b746351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a18cfaad45164fc79a0b5e65c194d049d</anchor>
      <arglist>(Index rows, Index cols, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>af7d98465f0e886d96423857591a34b26</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixUType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a49e16a4adf4fe58a2d65a5e5a31e7654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixVType &amp;</type>
      <name>matrixV</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>ae5158ab7ca44a705c2a3b56ec926b42a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroSingularValues</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>aa468765ea9b7f0e92380fa206e6498bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a817affb76314f99c5202ba24fe7ba0a4</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>ab0c2a2a006a990c72fb992905c1e3283</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const SingularValuesType &amp;</type>
      <name>singularValues</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a48d4068b97dfbb83d62599e56e26797a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; JacobiSVD, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>ae86e342cd51b067b08f8de8bae77537f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>aa5a87faaa92a3081045d1f934e292ef0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LDLT</name>
    <filename>classEigen_1_1LDLT.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>LDLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a46fcf31fdacf5205d1b6e6d64161a4b9</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegative</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a13ed609c8609698a470bb8dd0e43c09d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositive</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a02588e810c938a215dfd59d933488ba3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aec4c764dd032c14d861798976367e74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ad329b592888d8f5db088dfa01504f6ad</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a4f9c1dcdc8070fb63772e3d940e41fb3</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a625f69b684b4434db1cf3cc434e86fe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>abfb1a0b0f7ea94b420697055019a5b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>adc32fdba9f5b478afb2a96d53c6eacbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LDLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a910d592df729f6d1cee0ae2abf5f9612</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;w, const typename NumTraits&lt; typename MatrixType::Scalar &gt;::Real &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ac36925ac693435a090efee1cb5d6d16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a47affd1a10b589811fc4828c1a2e0c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; LDLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a71f78ede18adb53bdfe988161653e812</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const TranspositionType &amp;</type>
      <name>transpositionsP</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a9a07717c12ca93c79d792ae77f9767ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Diagonal&lt; const MatrixType &gt;</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>adc5b1ae5b9cbc8a64912b8818cef9b9d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LLT</name>
    <filename>classEigen_1_1LLT.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>LLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ac97b2f0b61df78a30544670b3711e3db</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a5bb9ddb29f0e0710acfe830794571f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ad14ba9fddbad27dbf73bafd1128f4f93</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a625f69b684b4434db1cf3cc434e86fe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a0b0ede52ac49b086994a447a321b1bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>adc32fdba9f5b478afb2a96d53c6eacbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LLT</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a3f4855b575252266be49fdfdd83a58c2</anchor>
      <arglist>(const VectorType &amp;vec, const RealScalar &amp;sigma=1)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ac36925ac693435a090efee1cb5d6d16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; LLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a301e28d205fb0308cb4f4b04718e1685</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map</name>
    <filename>classEigen_1_1Map.html</filename>
    <templarg>PlainObjectType</templarg>
    <templarg>MapOptions</templarg>
    <templarg>StrideType</templarg>
    <base>MapBase&lt; Map&lt; PlainObjectType, MapOptions, StrideType &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>afe23c7bb3258c300073673e0cf7e4e8d</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;a_stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a634c57f640ed589f49962cfbcc9389b2</anchor>
      <arglist>(PointerArgType dataPtr, Index a_size, const StrideType &amp;a_stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a94b95b4da8298b640ea47129f6d5331e</anchor>
      <arglist>(PointerArgType dataPtr, Index nbRows, Index nbCols, const StrideType &amp;a_stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8cbb66bbccf5f2c9596004a14129c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>abdb0743d0fe840b927780b2bd78fb29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab05eeebdd63f50a52fecb6353018075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab45aef6f20921b0997f4e8d75ef03300</anchor>
      <arglist>(Vector3 v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a65f6d2422debd1a64a2452641497e2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a33e390da91b3c4f42c2e7330c0a5338b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a67d7e844f940f6ca2673eadacaf08b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6761d13accfe34e38d907505221d081c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20b9b376e143961250055470585ac1d0</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a666e60218567ecf0ec8e2cd5040e1d87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3956cb2fddca9905ac6ed71a42ee2d2a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>ac040b01854bd9a68cf897936e8ba1efb</anchor>
      <arglist>(const Scalar *coeffs)</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2bb33b2ed836350b02a6b9083bf8b5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4b12380cc06df343c220d0745b50759e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac35460294d855096e9b687cadf821452</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa07f38d31b32610f5296f81d438b60fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8699d72c996ca6cb4673e810fe3a616c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bdc6d3cce92c44d32281aa2f85b56f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a154f40d7fec7be85112f7e7c12e4900b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5a8ee232e99cf184e74c6a8dfab5d43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae11dcbf26de9bc8c2afddf9a8b5c32a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5eb2596dc2a509b276d01578a9c3dd27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7b19faa70d70b5f16a39f1dd4b69e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a94a075384f8f54dc97a69546e600b78e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480a9376ddbb4d075331a3cefca97bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8cbb66bbccf5f2c9596004a14129c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>abdb0743d0fe840b927780b2bd78fb29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab05eeebdd63f50a52fecb6353018075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab45aef6f20921b0997f4e8d75ef03300</anchor>
      <arglist>(Vector3 v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a65f6d2422debd1a64a2452641497e2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a1617ce16af4ff4c65d2155848f2ea161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a67d7e844f940f6ca2673eadacaf08b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6761d13accfe34e38d907505221d081c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20b9b376e143961250055470585ac1d0</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a666e60218567ecf0ec8e2cd5040e1d87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3956cb2fddca9905ac6ed71a42ee2d2a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>aa5742a3a943c3adca0ea1f74f3339cb7</anchor>
      <arglist>(Scalar *coeffs)</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2bb33b2ed836350b02a6b9083bf8b5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4b12380cc06df343c220d0745b50759e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac35460294d855096e9b687cadf821452</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa07f38d31b32610f5296f81d438b60fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8699d72c996ca6cb4673e810fe3a616c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bdc6d3cce92c44d32281aa2f85b56f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a154f40d7fec7be85112f7e7c12e4900b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5a8ee232e99cf184e74c6a8dfab5d43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae11dcbf26de9bc8c2afddf9a8b5c32a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5eb2596dc2a509b276d01578a9c3dd27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7b19faa70d70b5f16a39f1dd4b69e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a94a075384f8f54dc97a69546e600b78e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480a9376ddbb4d075331a3cefca97bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MappedSparseMatrix</name>
    <filename>classEigen_1_1MappedSparseMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Flags</templarg>
    <templarg>_Index</templarg>
    <base>SparseMatrixBase&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</base>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae762210a1ab89bed1673edc09a6ec8b7</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;::Scalar, NewType &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbeb71e12bd4e65d20afd183ad962735</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4e2ff39353ad89db50ddf3dd7b52018</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f6c61e2de38668bc29d07360de3a89</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74a7586c8f5f2431fb3d66f7e534621c</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;::Scalar, typename OtherDerived::Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2664016e0a9629a181b822539485cfe3</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada4f791903d6f53f5b167ea5cbcee6a0</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a571c36d7211bd03dd1a06ac46c002fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const SparseDenseProductReturnType&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a944ff62beed1d6592b09a9cc3d77141c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2e4176a905b94907cf32dfe70a4bd1b</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2151bafac84e57f1ab0804ceb4095095</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;::Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;::Scalar &gt;, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a21092ba41e46066d1f128b38cdbdbbed</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MappedSparseMatrix</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a719fff69117e57718602e7b16c9c9b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const DenseSparseProductReturnType&lt; OtherDerived, MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d9b4ebc3f049fda2ff673f8bc4668d3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const MappedSparseMatrix&lt; _Scalar, _Flags, _Index &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Matrix</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a319e79809d439b8fabeafa27c28c8835</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::PlainObject</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>afd51a600a89b1b1d7db212cb8c80fbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4545be7a9af33ba337a4ebb0101395fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac00eb88e0d7599b8a2881715d3e4b35f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar, NewType &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ac24a195e3e35ce2d8946cee5873e51</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae238393021f2b8298b1fb1c094ccb290</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abbf58a9ff956976fb3a26d2a0f6a9dc3</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3202c9faf8977ca71a9b53ef4e4cc70b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a55aac6d6465a7c6b67b10aba69a6da54</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2373e043b49396e152523e85b0a2ace8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa1a53029c0ee62fb8875ce3c12151eda</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afc17a621f5682e6eba6a1c439174d550</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac3f5276480c741953c66498a078ecd30</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;::Scalar, typename OtherDerived::Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae759f49ab64f4d454e591bf610a09156</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa36bff7d4e9186e4fbed250b15ad9e36</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a40dcc334db75411e168691d9bce08c3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4663159a1450fa89214b1ab71f7ef5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a41c29f54b9da54e37fbe1756a0da7013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a468be7f76aaf518d692d9888a00ad23b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3aede62f513da27e6f61ae7a972b4f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3727f1c83c30f0b5a0056d7aaa077c4b</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3d02d48777a79061869f20ab216a759f</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac964eda90d804892390151bdf0f2a1c0</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ae935ed53e9609902a67341245ebc7610</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a5369f0750f5f1e885976fb598800d6d8</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0d71eee481ee51c202a74804aac59b97</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a5e72b7c50059bf70eca50ada11a4cf88</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac517028c963cd8f78a1efaf8cb04b462</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ad77e097b777eaa2daf25c9292ca15015</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a80f437faa158729792ccbd6f0c023d9a</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5648a35b9610ad47cb01912752db1dae</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32e1169b1338aa7edcc9a2dd69882ede</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2dab56059c2cd13fd3b36668a58fc1ac</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::Scalar &gt;, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ad0cefab13f61a9dfd2733a7da70a264e</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>af83f0a4a9e94b8ab5183aa9398e97539</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a96c8dafa3091ee2c1ba39244f3fbae65</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a78f22189db1a4cc4634bb8427ae64f06</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0b8db206b78137e95dc0833952ed1ed0</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aec9ca3c51c341a06bce3451ff1adc84d</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a58d9d13dd3982d05458767072c257886</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abe7b7417203825a6e434449cf0ac6529</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac52c575853da7de243d1142a35349e96</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6ffd15e8174a79a69a2b85fb36766748</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1660531fc88568a5defdb00224415e5</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7fde2114110ce2e1dea247ca7ea4ec80</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6d2f0645c710c69d2867330ad52e3eb4</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afe74b89d21566bcafff0a785d29aa9ec</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc12d3da3334f074ef78ce4574c02b1e</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62e1507113597a170c6da1f5160f4e6e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af42b8fbe1ec1c53f7be0c87ff642b930</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad288d654300a85d77774538cabf0883c</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a068773dba022bcc362ca5ef41d10e5e3</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7584fd4fbe3e3d5f2d24ff381955fbf8</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8dac2e03da821c7e7342d94280c8b423</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8a4c8353053c367b476f29293c45519c</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5021a7d90793fec34552875251568d9d</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aecf57b80587a641c17b7359b2c72250b</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad010f9df8245dadc5a19c02be6d7bcf8</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a63a6bbf40be3ee18223fd59db789350c</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62b9ecc0dd231c7a5eccc3963511d4ec</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adc7a2af56aad9706af5b930732b2be2e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae7b75e75f67b55b84a6c62e2d4577ff6</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2bfa83224478c85a37ddd962c3d844d</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3f8c3ef5aef0d73923826d00984e3675</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acb3e6d1b9633c1d4a7a74be8903e6334</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3cbc7e8bccd9a8736af1a9968dec74d9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <docanchor file="classEigen_1_1Matrix">fixedsize</docanchor>
    <docanchor file="classEigen_1_1Matrix">maxrows</docanchor>
    <docanchor file="classEigen_1_1Matrix">matrix_tparam_options</docanchor>
    <docanchor file="classEigen_1_1Matrix">dense</docanchor>
    <docanchor file="classEigen_1_1Matrix">matrix_tparam_scalar</docanchor>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBase</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::DenseBase</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea38ab482a62bf46f6ed6dcc4e9dd0dddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eae943bdba893721a848dfcd03db756b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eab30be5c02d7a124ec165d2ab6c5b05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea1264a9a69c437cbe0f8e723d88471c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eac9998fd25639e32ba4d58d67bfff4420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6eacf4ecb7db5a851c1ff90ae7621ab3fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea7e22277c8f0a1a76dd0d6c62e366b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea96296863b401484bc191339414c90e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea247b0f8b0eb0bfd5e253eb1e4b61436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9be5679ab03d785820f2474c5ccc6ea17c43b803133ba4f73b417edcbfb8206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; Derived &gt;::Scalar, internal::traits&lt; Derived &gt;::RowsAtCompileTime, internal::traits&lt; Derived &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Derived &gt;::Flags &amp;RowMajorBit?RowMajor:ColMajor), internal::traits&lt; Derived &gt;::MaxRowsAtCompileTime, internal::traits&lt; Derived &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac33495a0e3788e5951670c392b44d9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac43d5834cffcedbd27777329a8f5eeca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa9915f22bf6388c78f860dfe20e8e4e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aea914316af61df197f21629e14e7870a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac1dba91a5de689327121c20af5a5c18a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a42571e028736ca9103bac8b50f269824</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627d53362b0753eb710d8132e84fa490</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a146f355a8e78e220a49a0344d56b28e9</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9aaee4fba54baa7d0ca508e094f2d6f9</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a68c6383c506e63a2250be4433c73b519</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6e5b1e71a1916ddd01e7c324831c40dc</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>ga794a90a8b3f30366546f93c5b9b77b18</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Derived &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4545be7a9af33ba337a4ebb0101395fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adaf22d3a2069ec2c0df912cb87329e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac00eb88e0d7599b8a2881715d3e4b35f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6df34b875ae925798a3381a20b8f5ce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Derived &gt;::Scalar, NewType &gt;, const Derived &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a05afed751d3a7277951d1918468e0872</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a49a617f24129ca31a27fe8a67ec20370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe7ae69362c464b6721adbb47c655874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abcd1eb30af2979b147e1f65477caa209</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a687bc5340efb79f83dae171828407535</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa671b5ea336ba21a7644d3fa6577ee00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cross_product_return_type&lt; OtherDerived &gt;::type</type>
      <name>cross</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adb061c0be34af5f5f00ac8b3df0664d6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa5243fb88c6f95f539afdec31cdbdfc2</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2373e043b49396e152523e85b0a2ace8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa1a53029c0ee62fb8875ce3c12151eda</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afc17a621f5682e6eba6a1c439174d550</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac3f5276480c741953c66498a078ecd30</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Derived::Scalar, typename OtherDerived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae759f49ab64f4d454e591bf610a09156</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa36bff7d4e9186e4fbed250b15ad9e36</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad63cea11a4bf220298dce4489a1704c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0a45dd0ed5a44ec3f8f43239f2e4ac25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2f6e454a7e934fb8212d269c099d0f7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac062b66ec8aa4eb1f12cbf4ea3ff4f17</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afe69c3272e57ef9e19d4cc870d645994</anchor>
      <arglist>(Index index) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a41c29f54b9da54e37fbe1756a0da7013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::scalar_product_traits&lt; typename internal::traits&lt; Derived &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adb71ddef4955ae7d353df12d05665191</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ffa061371b1bd1b9f14ecef94b4502e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad118fececd448d7485ffea4858775e5a</anchor>
      <arglist>(Index a0, Index a1, Index a2) const </arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a98692bec8f3d859f1e7a60eab87ac571</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Flagged&lt; Derived, Added, Removed &gt;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afcbba97b05d9a88657783dfc4f931f3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ForceAlignedAccess&lt; Derived &gt;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a86875fbcf9ef290fdb82f6542687df33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ForceAlignedAccess&lt; Derived &gt;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4cb729c32116eedded672e8eed818696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebafa5f282acf909015f679fa3a65b1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac6a2fc1775837c6cbafa6b1c7d95e9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Derived &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa364b60e6a2a124ea7392e4c0550fb4e</anchor>
      <arglist>(const IOFormat &amp;fmt) const </arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae22be8c5d589a13a872d2b43614d3a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0844e94f8f95ae01a2cd88dbbf5cbf91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa867b1db3fb2dd56e7072c7684960ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adcf645f676d798fc19417d3ce43484d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af3513a0abfc3875e6d1912b8bb7b28ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abafaafa2e7eb9f485b282041833034bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa3aafc59ae3a7c8bb42ea3cee116fb59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::inverse_impl&lt; Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa2834da4c855fa35fed8c4030f79f9da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a158c2184951e6e415c2e9b98db8e8966</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed2515d3d813e1355933b6e0def44640</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a045c430069e53c7589e71fcc6984c8a8</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a328eb19f9ac6e8e05a6a8d0f8c08a41f</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aede9db017187617341b650897704a2f6</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa0ecaaed9bb6b1544b0bcaded1b41346</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40b9e8df68a52b2d46cf70c9babf2a16</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaa59b5a40da397d905789cf99bce18d5</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a34b4423fdfdf0c0644268095c55fe6ea</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0eb573c751ea82273a4dac71e851c1b5</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1230d9a9fa9557a46047abac659e8ed4</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67bdfb393aa7033313dd224ea255c904</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6dc0eb069536157ead1d46c660b9622d</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a27a6a2e9d8839662a29cc8294398ff97</anchor>
      <arglist>(unsigned int computationOptions=0) const </arglist>
    </member>
    <member kind="function">
      <type>const LazyProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a605309e450951e44eaf5167c59bc3c97</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a197a04cda6b4606ec2416fd3f950371f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72ca76a1df449fd21a21d15ac1d1042a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1f78d41c2ab7389e3df08384371188bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a013595649f973f38b3507d7cffe32ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a306f9da1f2385c4a6e33e1d0e09173f2</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab04e8cc14dd5445607ab15a0d27745a5</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878f0dae18b28d8158c5f1c232edced2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aad851ef369d212dcea81d9cded12dbdd</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b381dbcb0435c3a34a78abad4726cc3</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0af2b3991862a079e3efaef3e4d17d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add6cb2d85282829eb9adc9565ce784d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad927d600371ba16dcb44518530ba906a</anchor>
      <arglist>(IndexType *row, IndexType *col) const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae959fb7401b9cfdf900ff3b295466526</anchor>
      <arglist>(IndexType *index) const </arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Derived &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a324b9263b40738a260d46ff011b8d31b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Derived, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae77f3c3ccfb21694555dafc92c2da340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0be1b433c65ce9d92c81a4718daf54e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8ed1fb2e792b1079639a74e3581fbc74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5648a35b9610ad47cb01912752db1dae</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const ProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adf2ccabec2f82b36f445e9c7f58c9080</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const DiagonalProduct&lt; Derived, DiagonalDerived, OnTheRight &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1f423e078af275d2f90a59af85a43f8d</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const </arglist>
    </member>
    <member kind="function">
      <type>ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab413f2bd3b22564ab55633f7bca0155f</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac9beaa3954c989bbbc59b361d9423e78</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32e1169b1338aa7edcc9a2dd69882ede</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7aaf408b3bfbdd38749b01979393e814</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2dab56059c2cd13fd3b36668a58fc1ac</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2da6ae5caa522c1efec3a75428b22143</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade5d2e09de50c2ca145037f295542b16</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
      <docanchor file="classEigen_1_1DenseBase">MatrixBaseCommaInitRef</docanchor>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3dacded5374fe30f8d4eb4ae18bc87c9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a15b68c50126bd4212b7041d95743d729</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab66e9094f443151c6bf7f51073dc847c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acde54311cdc2b5731a6d27f7a5f7ad1b</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a78f22189db1a4cc4634bb8427ae64f06</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0650a523c77a498a88b4998809d0bd14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a734707779b0449ea429d4ae42c3350f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6bdcbfa7e3b07d3246ad80de7170b0f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afca0e8ff7921ee0e3ab4422818ecb214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0d2cad18a5459a6c98563defff4e3d0f</anchor>
      <arglist>(Index rowFacor, Index colFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6e354bb81f0c7b6888c6a0ce4b4649e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae3a4b984747fa12de0f521b3bff907b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af148c4e77e657d04573c4fda43740ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3af2f03b1d2affcec24e0748edf892cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8a7fd1e8004d4bd93a7ea36957aa8e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaaed9ab0c7a20c689017542e40d1ef6e</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a59df26fd07b401c361f53d84642d73ed</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const </arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfc67de2ba1403e6856bd1b7dd1388f9</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a351ca566980cf96d9cdd61f3ce0cf94f</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af1b15ae4c6f69b7324dd8ef70089dfc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad643c8a00f9d32b98659d9d745c56caf</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aca96b3050ceeffaa781d3d4ee185bd1d</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a043485fa5a9510639cd8034392371aec</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a196e62ee8a1fc3b4af631e955d650cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab795c242db18862f502dfd9fa625c504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9053ca03ac251002768a54742be28fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a229bd5cc6237359a1d85401743476ede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8cdb3143143e8df89dfb4c58977ea811</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3a3b3fb530d3364ecef0bf9c9daf0983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a71696dd0adbf4731561fd60e55c3a96e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Transpose&lt; Derived &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c187c30922fc5e42f208ae3eb0970ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a228b8f9641f46db6e92e06374ea87918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3689faf485a5e405a4fc9bf0e05564c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90150a6deb18826cee5ece716663358a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a85796290d88996a8c943c53efdf5988a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Derived &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Derived &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const </arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a42fdca0c5854b85d9482853c8a085dc1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af33f695c0e0ad5634ca73f19c347f7b3</anchor>
      <arglist>(Visitor &amp;func) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abb7652b9ae2c6ee26be9db276613c4f6</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa07edf1aa85b7e84bd6b15158efbca71</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa3647a2091ca73b864aee4126118fd44</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0650b65c6ae6c3d19a138b72a6d68568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac836fdaa36fbf51080ca710d682ef039</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a03a4ddf48fc9f3674a783da9c6ae34d8</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3a25508eab3a05851a3b4208b96eb8</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a30ceb9d76f8ca3ff5bc71f7797b9788d</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0e2ccb6cded6a7aa927c3410aee071b</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a138e37f3c338a544afb347aaf80d32da</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae50fd894930b4f917cf5c40f23965f67</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, Derived &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a24025debf13d8352eb963b814e08b5e8</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad148f93a6a00e32ef00903c5393337ef</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adec530c086d6b585ebb009fe4fbb77e6</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2278addf9a3c977d40322571a0df8ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a78061942c4ccb57f5b1dde173fdd8bd0</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f42aba8fbe2618deb0e80e4af876e04</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; internal::scalar_random_op&lt; Scalar &gt;, Derived &gt;</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8e759dafdd9ecc446d397b7f5435f60a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae908d6321d43a20ed57d9f6c1c6acbe9</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f665c26af64e93899d1899f67dbf11b</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a585b3898eb4f52adce6b7025fb8fb429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5e0e42c39330e4274d2d0479048ebc37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abc925a22c4f4b48b5b10fa90924f14c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a135f14351a7213bf0b764272c14ca68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a724349af3e253b69a54d503931b52ec3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a39390955f1297dacb49ac94429f321fd</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2e36721b4833498b713e94a7948c6a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixWrapper</name>
    <filename>classEigen_1_1MatrixWrapper.html</filename>
    <templarg></templarg>
    <base>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="typedef">
      <type>internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4d4873e91be950c079f067fa97fd5c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Scalar, internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::RowsAtCompileTime, internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Flags &amp;RowMajorBit?RowMajor:ColMajor), internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac33495a0e3788e5951670c392b44d9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4545be7a9af33ba337a4ebb0101395fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac00eb88e0d7599b8a2881715d3e4b35f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; MatrixWrapper&lt; ExpressionType &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Scalar, NewType &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2373e043b49396e152523e85b0a2ace8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa1a53029c0ee62fb8875ce3c12151eda</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afc17a621f5682e6eba6a1c439174d550</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac3f5276480c741953c66498a078ecd30</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename MatrixWrapper&lt; ExpressionType &gt;::Scalar, typename OtherDerived::Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae759f49ab64f4d454e591bf610a09156</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa36bff7d4e9186e4fbed250b15ad9e36</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a41c29f54b9da54e37fbe1756a0da7013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6cb26f170dd440dfafe11117cf826334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5648a35b9610ad47cb01912752db1dae</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32e1169b1338aa7edcc9a2dd69882ede</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2dab56059c2cd13fd3b36668a58fc1ac</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a78f22189db1a4cc4634bb8427ae64f06</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>add3bfb296c2f8e29aac6037b16c2e8a9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, int=OtherDerived::ThisConstantIsPrivateInPlainObjectBase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a203951fa04396e45d2c38737943c2c55</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const MatrixWrapper&lt; ExpressionType &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf21a576b8f3a10bb141b8afd173b13d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixXpr</name>
    <filename>structEigen_1_1MatrixXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::MetisOrdering</name>
    <filename>classEigen_1_1MetisOrdering.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NaturalOrdering</name>
    <filename>classEigen_1_1NaturalOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1NaturalOrdering.html</anchorfile>
      <anchor>a650f62bee23cc69bfdaf963c0a0dd8bc</anchor>
      <arglist>(const MatrixType &amp;, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::NestByValue</name>
    <filename>classEigen_1_1NestByValue.html</filename>
    <templarg>ExpressionType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NoAlias</name>
    <filename>classEigen_1_1NoAlias.html</filename>
    <templarg>ExpressionType</templarg>
    <templarg>StorageBase</templarg>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1NoAlias.html</anchorfile>
      <anchor>a9f671c4f6f375dfe0b2ec26c052336aa</anchor>
      <arglist>(const StorageBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1NoAlias.html</anchorfile>
      <anchor>a4fef2b3eea2f071ef7b69302eca76221</anchor>
      <arglist>(const StorageBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1NoAlias.html</anchorfile>
      <anchor>a31ed250d1ec226f5035f9bd467d9ec78</anchor>
      <arglist>(const StorageBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::NumTraits</name>
    <filename>structEigen_1_1NumTraits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::OuterStride</name>
    <filename>classEigen_1_1OuterStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; Value, 0 &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a5097377018539728197eae1e9a226675</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>addf96940f832bc716e6a8c1e9e362348</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ParametrizedLine</name>
    <filename>classEigen_1_1ParametrizedLine.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_AmbientDim</templarg>
    <templarg>_Options</templarg>
    <member kind="function">
      <type>internal::cast_return_type&lt; ParametrizedLine, ParametrizedLine&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a1c65a5e9e83b2ba93c71739cad4a6c94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a8809dd8f7c45e11b3f62c3fcf0175e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>distance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a07e68c35a13ec165902e8f5e670acd26</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a5332a558e67b203eddb54856f7609ff9</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>intersectionParameter</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a122c56306b853cf5128f5cc8c480afb1</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const </arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersectionPoint</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>aa9f9587d693e0cf94363bf7e3ebb64c1</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a696096bc0f2b23dbee9f800cd89ace73</anchor>
      <arglist>(const ParametrizedLine &amp;other, typename NumTraits&lt; Scalar &gt;::Real prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>ac5c2ec38035eb882c02df80d7e94c2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a5e7bf37eebc5f6f8fd9eb0d505cad45d</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>aaaa6ea65c420bb90c2a98719ea17074f</anchor>
      <arglist>(const VectorType &amp;origin, const VectorType &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a585e0885f09c39b72d99791e8de387b6</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a317dec95e2fb2bfef6b63b6b7bc10d4e</anchor>
      <arglist>(const ParametrizedLine&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>pointAt</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a0dfdd3abc1d123cfd6da5deba6ac51ac</anchor>
      <arglist>(const Scalar &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>ac93039c47cde2b60b29d99f3e1a7dc71</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredDistance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>ac1a8c756c2619371a35f80e062a16deb</anchor>
      <arglist>(const VectorType &amp;p) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParametrizedLine</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>af9509e5253a2b64d8be3a2c3a59395b4</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLDLT</name>
    <filename>classEigen_1_1PardisoLDLT.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>ab0129109d9d29e052c0e1d0231a5d79e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a2d06a3fe40014fc82ab8204578cf2d0b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParameterType &amp;</type>
      <name>pardisoParameterArray</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a32506fe389dcf91339e0490d296fdf40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a3d48fafcd8aaed4329a332479388308a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a8e4d2360a5ca6b8dd225fe45a55b89f5</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLLT</name>
    <filename>classEigen_1_1PardisoLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>ab0129109d9d29e052c0e1d0231a5d79e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a2d06a3fe40014fc82ab8204578cf2d0b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParameterType &amp;</type>
      <name>pardisoParameterArray</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a32506fe389dcf91339e0490d296fdf40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a3d48fafcd8aaed4329a332479388308a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a8e4d2360a5ca6b8dd225fe45a55b89f5</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLU</name>
    <filename>classEigen_1_1PardisoLU.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>ab0129109d9d29e052c0e1d0231a5d79e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a2d06a3fe40014fc82ab8204578cf2d0b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParameterType &amp;</type>
      <name>pardisoParameterArray</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a32506fe389dcf91339e0490d296fdf40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a3d48fafcd8aaed4329a332479388308a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PardisoImpl, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoImpl.html</anchorfile>
      <anchor>a8e4d2360a5ca6b8dd225fe45a55b89f5</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialPivLU</name>
    <filename>classEigen_1_1PartialPivLU.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>internal::traits&lt; MatrixType &gt;::Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>aa47f041dae554fe1f135e2794ae914a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PartialPivLU, typename MatrixType::IdentityReturnType &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ac51c61887a242ecfd26c3c0016899515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ad69664a62ab4d3026566d0d4a261b187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a89d7a9d72398abac8981ef23456c648e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a10cf6cb398968eb0b1e0c5359ace2406</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ad06a748eafce01ae965e5f8cc75e6b45</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ade18e5e1ca30e702fd1165e88933b342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ac36925ac693435a090efee1cb5d6d16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PartialPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a7b96596df4072bb09e8adb5ec2c067f2</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialReduxExpr</name>
    <filename>classEigen_1_1PartialReduxExpr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Direction</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLDLT</name>
    <filename>classEigen_1_1PastixLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a39e7187739766b84398ef4ab69ebd3b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a630a06e066f058db093e7dca06ce45af</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a33dbeb031de0bc9542eda27e189d5b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a97a90db0b2fa4f10c945f800f23e076a</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a23c397917859a65ea35f10b1f70a1f16</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>aba716659ad1cad5bea6c2b45bb3abb6f</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLLT</name>
    <filename>classEigen_1_1PastixLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a39e7187739766b84398ef4ab69ebd3b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a630a06e066f058db093e7dca06ce45af</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a33dbeb031de0bc9542eda27e189d5b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a97a90db0b2fa4f10c945f800f23e076a</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a23c397917859a65ea35f10b1f70a1f16</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>aba716659ad1cad5bea6c2b45bb3abb6f</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLU</name>
    <filename>classEigen_1_1PastixLU.html</filename>
    <templarg></templarg>
    <templarg>IsStrSym</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a39e7187739766b84398ef4ab69ebd3b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>dparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a630a06e066f058db093e7dca06ce45af</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, IPARM_SIZE, 1 &gt; &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a33dbeb031de0bc9542eda27e189d5b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>iparm</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a97a90db0b2fa4f10c945f800f23e076a</anchor>
      <arglist>(int idxparam)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>a23c397917859a65ea35f10b1f70a1f16</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; PastixBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PastixBase.html</anchorfile>
      <anchor>aba716659ad1cad5bea6c2b45bb3abb6f</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationBase</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a975548d0fd92d4b2a2cb09c2adf10ce6</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f93571373e20799e196513109f5b26e</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8876d615d17aad77b054a8f58b699e7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a53f29dec699d5e93db152c51545bc20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a594deabd0f368a746801f5dd14a0db2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aa06f5ef5169ce3e671abbc8776d2c339</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0f768ef1b4347d9e26ffdaeda5ceaa65</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ac96d811c408d8e282ad0036b1b9ed42f</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2c82c6ad7a8ed62a94931cb08b76e383</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a10a4bb6bdbaef170276db5837c1e4742</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ac4bd143bb38762fd91e546dbda01069b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a71ed95486aeea9fb396e85461ad5b73a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0972773a04ab8399ac02a16e5f243310</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationMatrix</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg>IndexType</templarg>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, IndexType &gt; &gt;</base>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, IndexType &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a975548d0fd92d4b2a2cb09c2adf10ce6</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, IndexType &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f93571373e20799e196513109f5b26e</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, IndexType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, IndexType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a8876d615d17aad77b054a8f58b699e7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a53f29dec699d5e93db152c51545bc20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a594deabd0f368a746801f5dd14a0db2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aa06f5ef5169ce3e671abbc8776d2c339</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0f768ef1b4347d9e26ffdaeda5ceaa65</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a5218236626301bb766d28ef2c2bc36cc</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac7eda93f7802af3cbaa59c7af0735e09</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a31817dd0a636b267980d8449e0f28eee</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a1230f979cf18fff312776e5464410ca5</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2fd31b16ca8fcd38623fb2c29c98b673</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;a_indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a93ded22c952fab17f1c74cf421f8e352</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a10a4bb6bdbaef170276db5837c1e4742</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ac4bd143bb38762fd91e546dbda01069b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a71ed95486aeea9fb396e85461ad5b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0972773a04ab8399ac02a16e5f243310</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationWrapper</name>
    <filename>classEigen_1_1PermutationWrapper.html</filename>
    <templarg></templarg>
    <base>PermutationBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</base>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a975548d0fd92d4b2a2cb09c2adf10ce6</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f93571373e20799e196513109f5b26e</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a53f29dec699d5e93db152c51545bc20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; typename IndicesType::Nested &gt;::type &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationWrapper.html</anchorfile>
      <anchor>a6e391bb71840d2e2be6ce94a856343d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a594deabd0f368a746801f5dd14a0db2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aa06f5ef5169ce3e671abbc8776d2c339</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0f768ef1b4347d9e26ffdaeda5ceaa65</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>aeac38cb29a1a50007d60782ae0d41138</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a10a4bb6bdbaef170276db5837c1e4742</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ac4bd143bb38762fd91e546dbda01069b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; PermutationBase &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a71ed95486aeea9fb396e85461ad5b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0972773a04ab8399ac02a16e5f243310</anchor>
      <arglist>(const Transpose&lt; PermutationBase&lt; Other &gt; &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PlainObjectBase</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ac24a195e3e35ce2d8946cee5873e51</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae238393021f2b8298b1fb1c094ccb290</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abbf58a9ff956976fb3a26d2a0f6a9dc3</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3202c9faf8977ca71a9b53ef4e4cc70b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a55aac6d6465a7c6b67b10aba69a6da54</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a40dcc334db75411e168691d9bce08c3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4663159a1450fa89214b1ab71f7ef5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a468be7f76aaf518d692d9888a00ad23b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a324c32ebeb07116ea253a6f5c477fe17</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a65a58af12990c2e395a7f0b4012d3b94</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5207d4c7f9d20e5fc74bfc9b54620b4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbbb33d14fe7fb9683019a39ce1c659d</anchor>
      <arglist>(Index nbRows, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0b8db206b78137e95dc0833952ed1ed0</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aec9ca3c51c341a06bce3451ff1adc84d</anchor>
      <arglist>(NoChange_t, Index nbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a58d9d13dd3982d05458767072c257886</anchor>
      <arglist>(Index nbRows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abe7b7417203825a6e434449cf0ac6529</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabcf7b6f4543f6255253b9ccee3309b8</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5e9b9ec4e59d79817f147841fd43e611</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a61c12117d893395a8fd0bf05ad3aeb6f</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a29556b8f3bc61429a3d171f095a2d153</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae1ce0775cd60a0bf2eda0902fc7fc9bd</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6bd7b98bddcd74995874966d14c5efad</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a04abe84a9a894de335a232681d9a0722</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa4b495f7c2a03614c8f53ffb45e65ea8</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac52c575853da7de243d1142a35349e96</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6ffd15e8174a79a69a2b85fb36766748</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1660531fc88568a5defdb00224415e5</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7fde2114110ce2e1dea247ca7ea4ec80</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6d2f0645c710c69d2867330ad52e3eb4</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afe74b89d21566bcafff0a785d29aa9ec</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8dac2e03da821c7e7342d94280c8b423</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8a4c8353053c367b476f29293c45519c</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5021a7d90793fec34552875251568d9d</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aecf57b80587a641c17b7359b2c72250b</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad010f9df8245dadc5a19c02be6d7bcf8</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a63a6bbf40be3ee18223fd59db789350c</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc12d3da3334f074ef78ce4574c02b1e</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62e1507113597a170c6da1f5160f4e6e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af42b8fbe1ec1c53f7be0c87ff642b930</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad288d654300a85d77774538cabf0883c</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a068773dba022bcc362ca5ef41d10e5e3</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7584fd4fbe3e3d5f2d24ff381955fbf8</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62b9ecc0dd231c7a5eccc3963511d4ec</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adc7a2af56aad9706af5b930732b2be2e</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae7b75e75f67b55b84a6c62e2d4577ff6</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2bfa83224478c85a37ddd962c3d844d</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3f8c3ef5aef0d73923826d00984e3675</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acb3e6d1b9633c1d4a7a74be8903e6334</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a3cbc7e8bccd9a8736af1a9968dec74d9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ProductReturnType</name>
    <filename>structEigen_1_1ProductReturnType.html</filename>
    <templarg>Lhs</templarg>
    <templarg>Rhs</templarg>
    <templarg>ProductType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Quaternion</name>
    <filename>classEigen_1_1Quaternion.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::AngleAxisType</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>aeba723a52092fca3fb22f9d45ac18332</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>abdb0743d0fe840b927780b2bd78fb29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab05eeebdd63f50a52fecb6353018075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab45aef6f20921b0997f4e8d75ef03300</anchor>
      <arglist>(Vector3 v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Quaternion&lt; _Scalar, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a65f6d2422debd1a64a2452641497e2f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a1617ce16af4ff4c65d2155848f2ea161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a67d7e844f940f6ca2673eadacaf08b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6761d13accfe34e38d907505221d081c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20b9b376e143961250055470585ac1d0</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a666e60218567ecf0ec8e2cd5040e1d87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3956cb2fddca9905ac6ed71a42ee2d2a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2bb33b2ed836350b02a6b9083bf8b5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4b12380cc06df343c220d0745b50759e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Quaternion&lt; _Scalar, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a65ed15cc19af958b5933b5c522f10e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a91b6ea2cac13ab2d33b6e74818ee1490</anchor>
      <arglist>(const Scalar &amp;w, const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>afb78170e1d8b745832839d4585becf85</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a5f7c4a058b9ca7bf6fb5d40c7c047a4a</anchor>
      <arglist>(const QuaternionBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a344a7c038d0b89e798baf2baa3b4a592</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>ad90ae48f7378bb94dfbc6436e3a66aa2</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a801ef1cd3194d3f9e3067c35d883ba4b</anchor>
      <arglist>(const Quaternion&lt; OtherScalar, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac35460294d855096e9b687cadf821452</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa07f38d31b32610f5296f81d438b60fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8699d72c996ca6cb4673e810fe3a616c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bdc6d3cce92c44d32281aa2f85b56f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a154f40d7fec7be85112f7e7c12e4900b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5a8ee232e99cf184e74c6a8dfab5d43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae11dcbf26de9bc8c2afddf9a8b5c32a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5eb2596dc2a509b276d01578a9c3dd27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7b19faa70d70b5f16a39f1dd4b69e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a94a075384f8f54dc97a69546e600b78e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>FromTwoVectors</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a459b111aa0dc9f41030491ee01e828bb</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480a9376ddbb4d075331a3cefca97bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Quaternion&lt; _Scalar, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Quaternion&lt; _Scalar, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuaternionBase</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <templarg>Derived</templarg>
    <base>RotationBase&lt; Derived, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8cbb66bbccf5f2c9596004a14129c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>abdb0743d0fe840b927780b2bd78fb29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a844358c46408e878e60c4026c52eb1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab05eeebdd63f50a52fecb6353018075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab45aef6f20921b0997f4e8d75ef03300</anchor>
      <arglist>(Vector3 v) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4e4d30217e807b45baf1d2d54424291e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a65f6d2422debd1a64a2452641497e2f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a316774ca4ac3e8d56a7e24e5e0ad8cc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a33e390da91b3c4f42c2e7330c0a5338b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6761d13accfe34e38d907505221d081c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20b9b376e143961250055470585ac1d0</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a666e60218567ecf0ec8e2cd5040e1d87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3956cb2fddca9905ac6ed71a42ee2d2a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2bb33b2ed836350b02a6b9083bf8b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4b12380cc06df343c220d0745b50759e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>adbf62b255c4287e6510c31982335f8b1</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa76d91cad6945c0d8f57d11289b3e8c2</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8ffbc66c68cc438bbf5cb0caa50598f5</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a320e5057b6f2d1dcdd4d6438c0c2036c</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac35460294d855096e9b687cadf821452</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa07f38d31b32610f5296f81d438b60fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8d297cb965ab8e823f858c8425bed8cb</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8699d72c996ca6cb4673e810fe3a616c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bdc6d3cce92c44d32281aa2f85b56f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a154f40d7fec7be85112f7e7c12e4900b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5a8ee232e99cf184e74c6a8dfab5d43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae11dcbf26de9bc8c2afddf9a8b5c32a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a81f3d09a835c62dbde6a0824f5db517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5eb2596dc2a509b276d01578a9c3dd27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7b19faa70d70b5f16a39f1dd4b69e7a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a94a075384f8f54dc97a69546e600b78e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480a9376ddbb4d075331a3cefca97bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealQZ</name>
    <filename>classEigen_1_1RealQZ.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a75cc509be2fa23cde7371b79ebd9f770</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ae231768dac8df88971dc1871f6493571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a498541357c143f345f0af5d6a6b9b3c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixS</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>af0356bea58e012ff54177cea8a340f64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a0d31900234ef9fea5751ce8ea693d71f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a0f5765f1177b790b663281635e15e73f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a4b2119ce39103693d003d8e434f00a3a</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic?1:RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ab81ec305afdcbf94ed288d382710e8d7</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a1b369841b0e39a1ac80a6c32b721d242</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealSchur</name>
    <filename>classEigen_1_1RealSchur.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ace387c8cea391973ca2a99edc720671a</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ae95f355f741977966f64ba1bb48e8357</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ab6f0a63ea1d26cef5e748207043eb43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a0d31900234ef9fea5751ce8ea693d71f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a7663c715ad9aaf8b57825646f5317166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a782ab2c509de1deb484bbd12d6e863a0</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic?1:RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a8d73d4e86d87bd2babf172909fc54198</anchor>
      <arglist>(const MatrixType &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>adcb20d95f17c74395f9a906e5a72ab6b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>afdafb24d67af7529bb903a4c9bff3ea4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref</name>
    <filename>classEigen_1_1Ref.html</filename>
    <templarg>PlainObjectType</templarg>
    <templarg>Options</templarg>
    <templarg>StrideType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Replicate</name>
    <filename>classEigen_1_1Replicate.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>RowFactor</templarg>
    <templarg>ColFactor</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Reverse</name>
    <filename>classEigen_1_1Reverse.html</filename>
    <templarg></templarg>
    <templarg>Direction</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Rotation2D</name>
    <filename>classEigen_1_1Rotation2D.html</filename>
    <templarg>_Scalar</templarg>
    <base>RotationBase&lt; Rotation2D&lt; _Scalar &gt;, 2 &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a0779e44b0f389bec959428f203bc766e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a83ab19e0cf6095c27248a0136d521172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Rotation2D, Rotation2D&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>aff949e81cb0f149761413b5c020b4d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ac76c2c98fc6f577c6e8e85f597081fb1</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ab8aa19861bb0513691b920826c75aa43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>acbcfcb4bf11ad867602619fb454d776d</anchor>
      <arglist>(const Rotation2D &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Rotation2D&lt; _Scalar &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ae0c6c089ae4f8aa3069d1de268522ab9</anchor>
      <arglist>(const Rotation2D &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ad34dc61aab8108f6b660a19d1fdf000a</anchor>
      <arglist>(const Vector2 &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a38e158a4156cbc2978e31a6256ae1d4e</anchor>
      <arglist>(const Rotation2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a4c944f17c4f3d932a892cada1b927625</anchor>
      <arglist>(const Scalar &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>abadf86cf4681517bd88d86b3cab16426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a4b8dc04e709066f966d91ce8d14d3036</anchor>
      <arglist>(const Rotation2D&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a56fb619ede8412eec05b51c22b1465c8</anchor>
      <arglist>(const Scalar &amp;t, const Rotation2D &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a6776dd88c18350adf71b2d4ae0c7012d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Rotation2D&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Rotation2D&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RotationBase</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <templarg>Derived</templarg>
    <templarg>_Dim</templarg>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>abb59a4f54aebad6325389d49d48de310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a844358c46408e878e60c4026c52eb1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afe93e2d51ae82a198430ec02e1be98f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a137458fc1a96a26c9fd58d7b2b61336d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a39e946f5ec63f80d28cf7988e6ba80b9</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a84d2f46dbcd54e3a3b8ebcc673ad3920</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>acd4f0475d084e54c0dde2ef3f78822c0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>aeb3f061eb5a0f7a4509f69a7f2b9d226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Select</name>
    <filename>classEigen_1_1Select.html</filename>
    <templarg>ConditionMatrixType</templarg>
    <templarg>ThenMatrixType</templarg>
    <templarg>ElseMatrixType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointEigenSolver</name>
    <filename>classEigen_1_1SelfAdjointEigenSolver.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>acb5c3dc237f99cf17167e8a629f01b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::plain_col_type&lt; MatrixType, RealScalar &gt;::type</type>
      <name>RealVectorType</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a4e33b38d1980864e689a8a1c01b782dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a3f6fc00047c205ee590f676934aab28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>aff6f3679ffb0098b33ccdefd4c5aaf33</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeDirect</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a85cda7e77edf4923f3fc0512c83f6323</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>af54b25fe7d2a3f578269381e9e5592a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a647a30aac0c6bb3def117dfb5ce90035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorInverseSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a811ad0873e06be5404fc91f64f0f658d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>add23e44f8a7f540c288ee98b2d2b0775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a4cd23cc2295a3daa079898bd4b9b3d4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>afacfaa11c727d3043d525f577b22c524</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a30caf3c3884a7f4a46b8ec94efd23c5e</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterations</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>adc66cd724d769ca37c38bc5ecb06dd87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointView</name>
    <filename>classEigen_1_1SelfAdjointView.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>UpLo</templarg>
    <member kind="typedef">
      <type>Matrix&lt; RealScalar, internal::traits&lt; MatrixType &gt;::ColsAtCompileTime, 1 &gt;</type>
      <name>EigenvaluesReturnType</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af7cc63140d17b562998188356f30da6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>acb5c3dc237f99cf17167e8a629f01b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SelfAdjointView &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a9ef555098df604af49b0a00d389d823b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>afacbe8d905dd8b00eb52e72c2e938aed</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a4386da578a119f7b500d0b22cab2de0e</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af7177136c93ee65b7c41c1798e23292d</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a847d0db612cd20e1b796c6a70d0f0d54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a66ac5c9b6c04321ab12364bba06fee66</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>affcc5fe7ffb333e0b99a5532d086cd2f</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject, UpLo &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a245df21a519cd34f5eb6f724cf5bf8e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject, UpLo &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ab6d4081f604fb2bc15ad285cf6bf54a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SelfadjointProductMatrix&lt; MatrixType, Mode, false, OtherDerived, 0, OtherDerived::IsVectorAtCompileTime &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a8b615fb312e03e69a42aa86f50c448f1</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a67279bc5b39fba3763acabf1d52ecad8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aa810209609743cb51cc2c4dcc30488ba</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const MatrixBase&lt; DerivedV &gt; &amp;v, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a7c361a7ff6bf1a5fa642ad4d2e6512ea</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend SelfadjointProductMatrix&lt; OtherDerived, 0, OtherDerived::IsVectorAtCompileTime, MatrixType, Mode, false &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1db4d59f32248eaf6a85abc51ba5ca6d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholesky</name>
    <filename>classEigen_1_1SimplicialCholesky.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <templarg>_Ordering</templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>a2adabb7d22f4ca60b8cc82b3c5db33ca</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialCholesky &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>af9baf4f7c7dd5791f9d6c21143ad6af2</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>aa45af9cb61ffb74e1b6cbde39f641166</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a627368b476d29ff4dbb0813ac79ba342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aceffb826f00a940b157dfea0dc6968a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a299d333dcd2cf63c4c2f6cfc0a95da7c</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a2eb06df831ecd66f56995e4bdee0308f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>abe2318376d9cb41fa612b793035da397</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholeskyBase</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <templarg>Derived</templarg>
    <class kind="struct">Eigen::SimplicialCholeskyBase::keep_diag</class>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a627368b476d29ff4dbb0813ac79ba342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aceffb826f00a940b157dfea0dc6968a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a299d333dcd2cf63c4c2f6cfc0a95da7c</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a8d3b7001a709a7349c45281e078747c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a2eb06df831ecd66f56995e4bdee0308f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>abe2318376d9cb41fa612b793035da397</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>acc1ae1a60943b6cad18724f348f75a70</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SimplicialCholeskyBase::keep_diag</name>
    <filename>structEigen_1_1SimplicialCholeskyBase_1_1keep__diag.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLDLT</name>
    <filename>classEigen_1_1SimplicialLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a2adabb7d22f4ca60b8cc82b3c5db33ca</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLDLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>abb673a0279657b0d56956834432d6efa</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a5b7276a9389ddc98eef275de0767839c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>aa45af9cb61ffb74e1b6cbde39f641166</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a7fbf104f2061ca8a0354e31b467c75a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a490989fca7fc80282cb7fa18836be1a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a627368b476d29ff4dbb0813ac79ba342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aceffb826f00a940b157dfea0dc6968a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a299d333dcd2cf63c4c2f6cfc0a95da7c</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>aac34342019296787e9e121b8643bd8fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a2262a4a93c7c0ee33136be663075c97c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a2eb06df831ecd66f56995e4bdee0308f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>abe2318376d9cb41fa612b793035da397</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorType</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>af251be55ba61c6501c6ea5d1aea7e8ac</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLLT</name>
    <filename>classEigen_1_1SimplicialLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a2adabb7d22f4ca60b8cc82b3c5db33ca</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a70ff3f219435bbcd1afba081a65a251c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a5b7276a9389ddc98eef275de0767839c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>aa45af9cb61ffb74e1b6cbde39f641166</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a7fbf104f2061ca8a0354e31b467c75a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a490989fca7fc80282cb7fa18836be1a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a627368b476d29ff4dbb0813ac79ba342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aceffb826f00a940b157dfea0dc6968a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a299d333dcd2cf63c4c2f6cfc0a95da7c</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a717685fefade3f90b93443f64783f78a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>ad0be567ad2ffb773ab672be87fb6f71e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a2eb06df831ecd66f56995e4bdee0308f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SimplicialCholeskyBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>abe2318376d9cb41fa612b793035da397</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::Sparse</name>
    <filename>structEigen_1_1Sparse.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseLU</name>
    <filename>classEigen_1_1SparseLU.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>Scalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a4c6b35f80ff9f6f0a3f4e74dfc121349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a1229744f4e8554ca6e96fe32ac359924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isSymmetric</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>acef7759add41200c1c817a6255e21dd4</anchor>
      <arglist>(bool sym)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a040b16815cde46c7f2f6d26a2298ca4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>adb61fce0a1343a45b65b6a50b18408dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixLReturnType&lt; SCMatrix &gt;</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a828ca6373b429d81f41f41429a7fd4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixUReturnType&lt; SCMatrix, MappedSparseMatrix&lt; Scalar, ColMajor, Index &gt; &gt;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a6001a3f3f7ad66583d9d1ce3bb3de262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>rowsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>ad856e0133763838bd626bfcd0cd1bf33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a20467be6f23d8b39574f3e097583d767</anchor>
      <arglist>(const RealScalar &amp;thresh)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a7150c533f7f2f6bdb1e9c82727f426f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SparseLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a8166735beae3bd23e7c3a1be9f0f5ef9</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SparseLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a39062d90ea647b4e7668452647b04b17</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;B) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrix</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Options</templarg>
    <templarg>_Index</templarg>
    <base>SparseMatrixBase&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</base>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae762210a1ab89bed1673edc09a6ec8b7</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar, NewType &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>afacbe8d905dd8b00eb52e72c2e938aed</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4386da578a119f7b500d0b22cab2de0e</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a85584f416c9e3a843fdafa2ef8dda195</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbeb71e12bd4e65d20afd183ad962735</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4e2ff39353ad89db50ddf3dd7b52018</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f6c61e2de38668bc29d07360de3a89</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74a7586c8f5f2431fb3d66f7e534621c</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename SparseMatrix&lt; _Scalar, _Options, _Index &gt;::Scalar, typename OtherDerived::Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2664016e0a9629a181b822539485cfe3</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada4f791903d6f53f5b167ea5cbcee6a0</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; _Scalar, _Options, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Diagonal&lt; const SparseMatrix &gt;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa9767c7ef9fea17a585e4ad45d2d4ad3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a571c36d7211bd03dd1a06ac46c002fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Index *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a828e04dedd8347ad1c463817b2e5dbed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac5204064425a0d6c87688ed48dd1d745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Index *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a2ae4fbae821c9f97e0710f5cb3b73c91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5e623b88f053da805a943ddbfd8c90a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1cbf43137ff55b8164ec8fc5e4da9deb</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4549e80dac9fd4f4c9ecee00814ecaa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5daf3de834937aeaa7ebc7f18cea746b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const SparseDenseProductReturnType&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a944ff62beed1d6592b09a9cc3d77141c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2e4176a905b94907cf32dfe70a4bd1b</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2151bafac84e57f1ab0804ceb4095095</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Index *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4cbbda70dd9a9a925d749e4258fecb5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa6555eda454250b6cc9cd42e1ba137a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa4592d803de19800d8fb3cb07a5036b6</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a2b7d855d3304b9768e51eb8890f69da1</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5dc6018e77e65abd29416138c6bd67d4</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a2833db2d271c76ef91fa28f2487fb596</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac20f895ce9b73fa7447196855c0d0758</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5bcf3187e372ff7cea1e8f61152ae49b</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a47affd1a10b589811fc4828c1a2e0c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a79446a803c1bed8b17c8ac937d07be39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a400288628e3257a6216b04ba4b2762c7</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ab42390876ea7ef3fe4845b936c281c99</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>adb330ac5ce39e4e90e129a7dc2861f98</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a631add606d943913aa2dbda84c0d4d20</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ace8ac898d02532cafa313c6351a74468</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a396133d952d4698941fe010c7ec6f72b</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; SparseMatrix&lt; _Scalar, _Options, _Index &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a21092ba41e46066d1f128b38cdbdbbed</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ef2ab1570917494405e20d95b606684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa44fe8c6de1533193f303ab7c4d43692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68fdb1898144415299720626410f021d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aba0104120c59e6c59af1932a8eaaa10e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const DenseSparseProductReturnType&lt; OtherDerived, SparseMatrix&lt; _Scalar, _Options, _Index &gt; &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d9b4ebc3f049fda2ff673f8bc4668d3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseMatrix&lt; _Scalar, _Options, _Index &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrixBase</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267a38ab482a62bf46f6ed6dcc4e9dd0dddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267ae943bdba893721a848dfcd03db756b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267ab30be5c02d7a124ec165d2ab6c5b05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267a7e22277c8f0a1a76dd0d6c62e366b59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267a96296863b401484bc191339414c90e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a02b9c8105b11ceb6138e19e394872267a17c43b803133ba4f73b417edcbfb8206</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae762210a1ab89bed1673edc09a6ec8b7</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; Derived &gt;::Scalar, NewType &gt;, const Derived &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbeb71e12bd4e65d20afd183ad962735</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4e2ff39353ad89db50ddf3dd7b52018</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f6c61e2de38668bc29d07360de3a89</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74a7586c8f5f2431fb3d66f7e534621c</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename Derived::Scalar, typename OtherDerived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2664016e0a9629a181b822539485cfe3</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada4f791903d6f53f5b167ea5cbcee6a0</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const Derived &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a571c36d7211bd03dd1a06ac46c002fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a82e85a82828faf64db942b76d0cab923</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aad1506e000d7d2cabb045e7c8154dd88</anchor>
      <arglist>(Index outer) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, Dynamic, Dynamic, true &gt;</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3523b025393c0f1338b3f2fc0565c32b</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, Dynamic, Dynamic, true &gt;</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e7bd0b37aa3f33539e9ba5aca72d995</anchor>
      <arglist>(Index outerStart, Index outerSize) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const Derived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const SparseSparseProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae7d7083917427445e50f3c4b5bf8ba6a</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const SparseDenseProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a944ff62beed1d6592b09a9cc3d77141c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2e4176a905b94907cf32dfe70a4bd1b</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2151bafac84e57f1ab0804ceb4095095</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;, const Derived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block&lt; Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const Derived, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const </arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const </arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a21092ba41e46066d1f128b38cdbdbbed</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Derived &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Derived &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const </arglist>
    </member>
    <member kind="friend">
      <type>friend const DenseSparseProductReturnType&lt; OtherDerived, Derived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d9b4ebc3f049fda2ff673f8bc4668d3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const Derived &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseQR</name>
    <filename>classEigen_1_1SparseQR.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a5907227f29f3911de653273efef11b45</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a1229744f4e8554ca6e96fe32ac359924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a506e8d29876827f78f277fa7a17ef75f</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aca041ec6ace60e0e597f40706e9c894d</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a040b16815cde46c7f2f6d26a2298ca4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseQRMatrixQReturnType&lt; SparseQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ac27067ab301641fe6cc35c216a9b18a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const QRMatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a934752a840893040688fc788848a1e06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ad00a1dda3c45b53e1f91219824773b1c</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SparseQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a2faae287189af711e5f8ac62c140c71f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseQR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ac8ca8a2f4344b1d6c0491afcc1d6db89</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseSelfAdjointView</name>
    <filename>classEigen_1_1SparseSelfAdjointView.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>UpLo</templarg>
    <base>EigenBase&lt; SparseSelfAdjointView&lt; MatrixType, UpLo &gt; &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView&lt; MatrixType, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSelfAdjointView&lt; MatrixType, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSparseProduct&lt; typename OtherDerived::PlainObject, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a6becf66c0294e516cbe73141c4276452</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointTimeDenseProduct&lt; MatrixType, OtherDerived, UpLo &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a33246b96f75f2d1d38f13ffbf1cfdde1</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a74b24ed4a1ca37969bbb52416db01bf3</anchor>
      <arglist>(const SparseMatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; _MatrixTypeNested, UpLo &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a0a6190f7932927f85ef69f2f63d0c9c4</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const </arglist>
    </member>
    <member kind="friend">
      <type>friend SparseSparseProduct&lt; OtherDerived, typename OtherDerived::PlainObject &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a75bf70d2a0ed3334b4676132f98e677c</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend DenseTimeSparseSelfAdjointProduct&lt; OtherDerived, MatrixType, UpLo &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>aabbbcb01be70dbe9cde68fa72ea5c252</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseVector</name>
    <filename>classEigen_1_1SparseVector.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <templarg></templarg>
    <base>SparseMatrixBase&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</base>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae762210a1ab89bed1673edc09a6ec8b7</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1dbaa2fc7b809720407130f48dfacf8f</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace64451d903a49f7627cb3b87257c801</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3e433315822db2811a65e88c70672743</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a40f9466c400c6dc5779380124e37bf7f</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9d35d793f33794df591242d942f98d65</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, BlockRows, BlockCols &gt;</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13fc71e26059f25c5a0de1ebbdfe3375</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a641cf096441faf5ab490c4973c719c7a</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd00a289a3033ba0802cb55c23910874</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a243a44832e36d2bf5d0d8d17d1505900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7fa849b36665dcca6316f05a634e6540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7a305fa6d02685ea21c9050617d837d6</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a878151caf2ff25ebbc76186485f81207</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b9618f3c9eb4d4c9813ae8f6a8e70c5</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a26cfa9c974065fc714cdaf7a5fdbe1ed</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6563b16b601d9fd66340ab04d101f9d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa0b8870679a8b100f24a8eecf1ac3477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13b796ff9732af7ec072455513480bd4</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f1d3781d0dbcf80b79087c5acad5f5</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afe61d23353a75d7034f7b44ff02aaea1</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae5959de43ccb180fbd4ad44002441a52</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0d50068b3e133e938202f4e23445aba</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab75475e30affe582fc16e256741a4f1a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, const CwiseUnaryOp&lt; internal::scalar_cast_op&lt; typename internal::traits&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar, NewType &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a660200abaf1fc4b888330a37d6132b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a628cc6bf467f74c3c2d54b0cc414e98b</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a58c77695de3b33405f01f2fdf3dc389d</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a390f7c534678354959dd587080b82c2c</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab6c2241712d7faf07019a0d86d3fb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4d8398a4497e4a888cfc11c51c14a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_abs2_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abc9cb99dcb93caf0c3c37860aeef30b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbeb71e12bd4e65d20afd183ad962735</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; std::binder1st&lt; std::equal_to&lt; Scalar &gt; &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae1f241762b604c2117232c5c994068bb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_inverse_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a433cd5f8e17b2662c4081ec798fa54be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab4e2ff39353ad89db50ddf3dd7b52018</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e985c7a4f692584865b9ec9e7d5780c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a10f6c61e2de38668bc29d07360de3a89</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac02d0af0ea867d6b1cc0cc4db0e1d480</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74a7586c8f5f2431fb3d66f7e534621c</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; typename SparseVector&lt; _Scalar, _Options, _Index &gt;::Scalar, typename OtherDerived::Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2664016e0a9629a181b822539485cfe3</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada4f791903d6f53f5b167ea5cbcee6a0</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_sqrt_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a88945ad7d126468c10e299e896bf0d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseVector&lt; _Scalar, _Options, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseVector&lt; _Scalar, _Options, _Index &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a571c36d7211bd03dd1a06ac46c002fe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ade4c5211a2be02bbf477352228b323ae</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a41fa0eb5d46891f2345ff7cc9f3fe99b</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afab7d7b04a8ab7fbe7dce61513c70492</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5d574a75a1054b05804862f847ec32de</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01069a930197aeca3b13b44bdc426c7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1032121a2fc5fcc5f006f976413378f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>acd9791e1914ad8761992e16032d49c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6ed9d8dbec28bf8536105047dc8f375e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ace4288d22b0312944ec93c8c46474ef6</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa43a2f7ef9b8029727a3e0424fd4e57d</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af915090ee1e32d74dc6a9037e7b36c5f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a27392d7a73eae182c766938c93c13ef2</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2d4f5da8e2019251ad3ed876d363d5d1</anchor>
      <arglist>(Index startCol, Index numCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a428643f7e51813faa8c8ad89b8282235</anchor>
      <arglist>(Index startCol, Index numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa257ee10f662780e48cd9cec53bbbb86</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad95bf75ae40119637a809d02bf53e4da</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aee53d4065b9aa5164ea8e5fe9459a779</anchor>
      <arglist>(Index startRow, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a491f1ff40224dd1aa37d26cb42438cc4</anchor>
      <arglist>(Index startRow, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af0876bbd4a94f44008452fd9486cc26c</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a244977920d9254b31da36bb05b0057c6</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>abe29bfb5f2d88cf2a50ffb577ec6f0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarMultipleReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae8ab11fb1ef0822aa61527f7ecd77b9d</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_multiple2_op&lt; Scalar, std::complex&lt; Scalar &gt; &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a01a3dfc024abbb42150002facf498357</anchor>
      <arglist>(const std::complex&lt; Scalar &gt; &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const SparseDenseProductReturnType&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a944ff62beed1d6592b09a9cc3d77141c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2e4176a905b94907cf32dfe70a4bd1b</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2151bafac84e57f1ab0804ceb4095095</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; typename internal::traits&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7f53ae2f5586a75f1747d84822ae9581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; internal::scalar_quotient1_op&lt; typename internal::traits&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;::Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae78e46db7ee3ba78d3cf59968d261f90</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>af080d3d3f82e0d4391f19af22a5eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4a1c87f8e48a66edc05859421048f8b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>accfa15407b80807dab914b1844c725e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af80f9e4e3708d7e3b0e1487ca90cf339</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstColsBlockXpr</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad16081d19c5482a30aa6be15769e8056</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3400066e9b6d285f5214748b6332a7a4</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a553136b326ce6bdd67ff4610ea20f598</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8716d44f51321072ee5c88665c28813</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad62dcaf648cca25e9318da34c9840799</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9dfa43e5ac3984e38b1dee1f06415003</anchor>
      <arglist>(Index start, Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a686a182050df26084c0519f9f6633c68</anchor>
      <arglist>(Index start, Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a57815573b5eeac29e8d12d6136dd05fd</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f4183a7b0211a36ddf2081db7aa4376</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a50aa7e3daf217e806abef0a44a54ce96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>aa4c953fb9e8b7ce8457c288601d6b4ea</anchor>
      <arglist>(SparseVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3bed656b21b610ae88c51d281b5f8c44</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstSegmentReturnType</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5e993c3ec78be489101773aa809ea52e</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a392a82a3f895ed885a654ebaaffcf47f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a256bdc19a7d6b5d9cb16cb683b446e6d</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f5fc5fe9d3fb70e62d4a9b1795704a8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af51f8dd1a464c0fe48182f7bab7ffab6</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae06d0a5c4008014fb717866aec8d30c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a29c05f280e61cf18f5865b0065cc769a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae2942bfb77ac330fdd91d3f063686a63</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b549d0127afc14bab07e4f440c4aeec</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a318006038c9becc5f9af003b7c77ea18</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8cd6c56ce974c092a0aa0f11ca1853cb</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad0088b2c1ec4dbd677dd19f589777945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbe4b3135cc0afa4eee8d9db60c637c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1bd671d8eea4781a3808d59718ba8b42</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseVector&lt; _Scalar, _Options, _Index &gt;, CRows, CCols &gt;</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8df165d3b3bedfe1386f20f3c2126973</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>RowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afdfced3e157f74b3bc68892aad178424</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowsBlockXpr</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac77be6c2cf44abbb6f80496cbe14f2af</anchor>
      <arglist>(Index n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7e5159cea1bb46677c35df0dc06237a6</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9c4cd92f386a6d4a583eac2a7637cc07</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; SparseVector&lt; _Scalar, _Options, _Index &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a21092ba41e46066d1f128b38cdbdbbed</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, Index &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a23fc4bf97168dee2516f85edcfd4cfe7</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aba9ae3923f6caa962ef3418d6872c369</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseVector</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a5f5e6bacb0ddda1f48d6ec87564b9dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const DenseSparseProductReturnType&lt; OtherDerived, SparseVector&lt; _Scalar, _Options, _Index &gt; &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d9b4ebc3f049fda2ff673f8bc4668d3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseVector&lt; _Scalar, _Options, _Index &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SPQR</name>
    <filename>classEigen_1_1SPQR.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>cholmod_common *</type>
      <name>cholmodCommon</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a6900999956a38bc60855289918a62d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PermutationType</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a60c6e65462cb1cab3a89d3afb37b35a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SPQRMatrixQReturnType&lt; SPQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a2cca4c4270406a8d173bcc4339ef9394</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a9e36438e57c52afd02c489ab9833a440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a363d1c09d77f09d6ea2d2789776e7be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a5d0d1c42d19d3e538a123813f7b62c5b</anchor>
      <arglist>(const RealScalar &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSPQROrdering</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a2a2c8ca72c8bbd609c162950128ac969</anchor>
      <arglist>(int ord)</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SPQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a7fcaf5446687d32b11ec4fb9fc5587e2</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Stride</name>
    <filename>classEigen_1_1Stride.html</filename>
    <templarg>_OuterStrideAtCompileTime</templarg>
    <templarg>_InnerStrideAtCompileTime</templarg>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a5097377018539728197eae1e9a226675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>addf96940f832bc716e6a8c1e9e362348</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aafe5ffb0d67a2833632e279aa5671d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81a9f7f373c02fad9242e337a4322b43</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a138766f34cf51bb388385df2dac9ed86</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperILU</name>
    <filename>classEigen_1_1SuperILU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperILU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>ac0ee27bd3e65e8a721ef7e7719499367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a86f332361701608bbfdde64c7aab670f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0bf5dc2154e2f03bf871eca997c6e6e6</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLU</name>
    <filename>classEigen_1_1SuperLU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a6f2a135bd741b6b2f2558e6a404581ff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a33e2421e468033a883c041f940537a7c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>ac0ee27bd3e65e8a721ef7e7719499367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a86f332361701608bbfdde64c7aab670f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0bf5dc2154e2f03bf871eca997c6e6e6</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLUBase</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a818c1eda7fe0dae9d5110d7d5f74a630</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a05a0eac1c146e9e62df9ec70f5a6f69d</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>ac0ee27bd3e65e8a721ef7e7719499367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a86f332361701608bbfdde64c7aab670f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; SuperLUBase, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a0bf5dc2154e2f03bf871eca997c6e6e6</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transform</name>
    <filename>classEigen_1_1Transform.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <templarg>_Mode</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), MatrixType &amp;, Block&lt; MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>AffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa15d55b76aa1df369db63ff8c000d71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), const MatrixType &amp;, const Block&lt; const MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>ConstAffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a76d43dc15b6966af98842e5219152cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Block&lt; ConstMatrixType, Dim, Dim, int(Mode)==(AffineCompact)&amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>ConstLinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a161af5ac05c0305aa1fb6c5a868e22e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const MatrixType</type>
      <name>ConstMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac02f5facfe284620ba0141a95ec9a8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Block&lt; ConstMatrixType, Dim, 1, int(Mode)==(AffineCompact)&gt;</type>
      <name>ConstTranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4b5352e0747f0354c659edf2eff9f35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim, Options &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ade2ee06371d257b0eff58531d95a6474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, Dim, int(Mode)==(AffineCompact)&amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>LinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a3239ff8c2d15598525a1770c764cc3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::make_proper_matrix_type&lt; Scalar, Rows, HDim, Options &gt;::type</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a5a1112983fef15f856661bc7a70821c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, TransformTimeDiagonalMode &gt;</type>
      <name>TransformTimeDiagonalReturnType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>adb187d1758687a8de4dd9ea275f2a0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, 1, int(Mode)==(AffineCompact)&gt;</type>
      <name>TranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa94dac47195ab409fd1535c152405505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Translation&lt; Scalar, Dim &gt;</type>
      <name>TranslationType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac54aa49e111f1afc14c11a3a671993ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0c16671587fa0dc76fafeb486d6461c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ConstAffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4edf00461b9e1ce0abb791cee8a12ca5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa8e36298662286f4619b2cedf09e31e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Transform, Transform&lt; NewScalarType, Dim, Mode, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a5d8d5b5101ca4b34cb88fd4f71cec08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRotationScaling</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad84ac89e9b8499975bad62a9db9f8b4c</anchor>
      <arglist>(RotationMatrixType *rotation, ScalingMatrixType *scaling) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeScalingRotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac85861889115ef75aaecec5eb7582f12</anchor>
      <arglist>(ScalingMatrixType *scaling, RotationMatrixType *rotation) const </arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a40dcc334db75411e168691d9bce08c3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4663159a1450fa89214b1ab71f7ef5bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a08fcfa17a274862a36b5908d2b261e0d</anchor>
      <arglist>(_Scalar, _Dim==Dynamic?Dynamic:(_Dim+1)*(_Dim+1)) enum</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>fromPositionOrientationScale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>af0e3d0e3f372664f20fd91c3297f3dc8</anchor>
      <arglist>(const MatrixBase&lt; PositionDerived &gt; &amp;position, const OrientationType &amp;orientation, const MatrixBase&lt; ScaleDerived &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a29b71eedfb78a436577878e2e5560946</anchor>
      <arglist>(TransformTraits traits=(TransformTraits) Mode) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a970e36d17bd859badeacfbe73bc7364b</anchor>
      <arglist>(const Transform &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>ConstLinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>abbee559820c5cdfe7653a646396b0a8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a66704eaad42c9dd8f3723746e264fcb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAffine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a3de2b78841914f0f4e2a523c88b8530e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>abc21b93260324521746a4ca2efacba90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad7355bb89f8429007277363642c90bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a84a0005514199136b5d20d8e626d47ff</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac40b13c3b1b753f4f6aa8c6885eec706</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>const internal::transform_right_product_impl&lt; Transform, OtherDerived &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a3846f7a4b892ed530881f52a5460ddf6</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const TransformTimeDiagonalReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4c475d88c97a844134130c603b4c6fe6</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a3001cf5afd95d96a4a229e0c5f817364</anchor>
      <arglist>(const Transform &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>internal::transform_transform_product_impl&lt; Transform, Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a75c357d299b0aa35926bc4602e9ee11e</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a746fdf41f0377f203f231a1705cf6012</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa9e304d555b96b73ac4e8ca5a7f90d65</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa5c4642624c7a29a23032328556cf7e7</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>prerotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a267123d187488be032c85afe55550b04</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0b61848fd82b100d0a47fbc509fef88f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9310182d5c7b018efc022fec6601100d</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>preshear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a5448d7cb18b99426d18dfc3a18c0f4a7</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>pretranslate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4836cbf2754f99d889385e30cbae09df</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>rotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9c4b5a267f9e0daf6928aec7ae357638</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>const LinearMatrixType</type>
      <name>rotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0c792f75e5e52207a6c011d8104367ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1d42977b49645b96cde3eb44d21f04ec</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8dfff7973fce3c259e1a2b128015abac</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>shear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a44ffe4dae84e42589daf1b9047320ce6</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>QMatrix</type>
      <name>toQMatrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4721b3c0d0dc5c79fcd5dac8a352bc5c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>QTransform</type>
      <name>toQTransform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a58efdb505853955c01927ab52d1ea88f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9de68ec1c9b7809129814a3233ae4655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae80ecf3abb4b22d409c5adbd19850aa8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa5e266f2a7d9007d41655186de5b66be</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a57dc9afa8645010c63677a60457071b2</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4a1ecdb7e8eb963f3e167fa99faa5e95</anchor>
      <arglist>(const Transform&lt; OtherScalarType, Dim, Mode, Options &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a57f405f85e406b6fe972a8ad6e11717c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstTranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4619e6e4e0659443ad2bdb24c80af281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a79881f97c02305c0eb4820d7df00bc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Transform</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a70ece05618a24131d9bf29162a700c58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const internal::transform_left_product_impl&lt; OtherDerived, Mode, Options, _Dim, _Dim+1 &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a213c219b6aa33d8348eaee56bc40bd7d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend TransformTimeDiagonalReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8941cc25b120ff7ee7b435150ba699b3</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Translation</name>
    <filename>classEigen_1_1Translation.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>AffineTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ae0819689c40a9fd7aa20c63faecd967a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>IsometryTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a2fc228d7d105715272c4f1a2aa018af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ab123316c79bd49697f551c8047cc2356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aea29b63b6c32046ae9a471d82c5cf869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a0c16671587fa0dc76fafeb486d6461c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Translation, Translation&lt; NewScalarType, Dim &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a3fb1728a5460763fbbe97299879c0d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a4a30d0656f2326b33bfe22782619dab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a22e1d6d012e5c852a3515d3f2c66d99c</anchor>
      <arglist>(const Translation &amp;other, typename NumTraits&lt; Scalar &gt;::Real prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const </arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a42026a509f82e98803005fa8893a81a7</anchor>
      <arglist>(const Translation &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a51ca261eeb17be60393fdbee5119cd0a</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a73d0b5d53764e2602dc4e7bf59000428</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear) const </arglist>
    </member>
    <member kind="function">
      <type>IsometryTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ae03a19b4e13d143cd13e5a6ebd62c12e</anchor>
      <arglist>(const RotationBase&lt; Derived, Dim &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a4905e372221a7ca6eaf7f11056bc1b7a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a4e66a7d6ec3f45223ee76dc65c1672ab</anchor>
      <arglist>(const VectorType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ae4694a2ae6f5453587c5d7f4bc385ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ab27a696c206af5c7ddd03f2d7690c597</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ab9af64a960f10e1ee8878d6bc3526f49</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy, const Scalar &amp;sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a7475e79dd0650a93f66e078f4ab9c58f</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ae9786b865342bd96b4df2bd731e42875</anchor>
      <arglist>(const Translation&lt; OtherScalarType, Dim &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a5eb2596dc2a509b276d01578a9c3dd27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a5e6fc074bced85f298c76edac1af6cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a7b19faa70d70b5f16a39f1dd4b69e7a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ad948bb3bd6866bdca15149880c34be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a94a075384f8f54dc97a69546e600b78e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a1abcf9e222c8e5c38cf63f6821cd6480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a918cdd281bce3363e0e242b22bccbbec</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear, const Translation &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpose</name>
    <filename>classEigen_1_1Transpose.html</filename>
    <templarg>MatrixType</templarg>
    <member kind="function">
      <type>const internal::remove_all&lt; typename MatrixType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>a6e103ceb35c366db1f6da2e010618160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>internal::remove_all&lt; typename MatrixType::Nested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>a9cafb8a7b4fce330af145a175501293a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpositions</name>
    <filename>classEigen_1_1Transpositions.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg>IndexType</templarg>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>a47cd9d9f732693e925c964971272931a</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>a211863b210e48a78bb0f133aeb6ef27b</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a8876d615d17aad77b054a8f58b699e7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a53f29dec699d5e93db152c51545bc20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; TranspositionsBase &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ab7061cd876ca7cf9b3247aceb71ce546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>a1e67206dcb38999b1521c2f170727162</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ac47e1eeff8cc989d49e677fe34269906</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>Transpositions &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>aa7fa08a35030d776f2588b5ea55a6be5</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ae3d76eb2876f1784a913c22166cf9470</anchor>
      <arglist>(Index i) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ab81f2ddae2cd2adea24fa20675d131a5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ab8b22b9d0f25d76dda44f79aeabd826f</anchor>
      <arglist>(int newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>a382e6ad7e6721b121e510959e1011be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; TranspositionsBase &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TranspositionsBase.html</anchorfile>
      <anchor>ae153935f0ffecbcf48bd3c982122a372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a1aa3f20aefdb81543ce83baa35c4c412</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a65fdb58351000ca12164022742d61080</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;a_indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a9b6182d7f0e8067f117afab16f94d98f</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularView</name>
    <filename>classEigen_1_1TriangularView.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_Mode</templarg>
    <member kind="function">
      <type>const TriangularView&lt; const typename MatrixType::AdjointReturnType, TransposeMode &gt;</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a6e01ee01c822801c4aa1a5bbce77c0ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>afacbe8d905dd8b00eb52e72c2e938aed</anchor>
      <arglist>(Index row, Index col) const </arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a4386da578a119f7b500d0b22cab2de0e</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aaca1908a5ec508a25ff0a8bca803e5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TriangularView&lt; MatrixConjugateReturnType, Mode &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a57f41303472580f266cd951a234b035f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TriangularView&lt; MatrixConjugateReturnType, Mode &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a0fb086b8c07505645d7e6a937d2e6b05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af7177136c93ee65b7c41c1798e23292d</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>aa84222add803ad7c9db07dd4dd91d5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a2850de52161dfe2bb6e380f1892276b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a66ac5c9b6c04321ab12364bba06fee66</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>affcc5fe7ffb333e0b99a5532d086cd2f</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a98692bec8f3d859f1e7a60eab87ac571</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TriangularProduct&lt; Mode, true, MatrixType, false, OtherDerived, OtherDerived::ColsAtCompileTime==1 &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a56310f448f7cdbe16666ef06b180f544</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a1dc18a489eb53c2759e84864b51c76d7</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a778602f2edd03e48cb4970d33dadd02d</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a167200a169385cbdb7e089b2f273b0f4</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ab8990a5fa1a410c4618a072601e1700e</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ae4707926179e707f62ff37cbf3fded17</anchor>
      <arglist>(const TriangularBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a5552abd83dbd03c85cea6d61fd8875a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a0090f620cd02d7370af4c3e9f463ef87</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>adec7a08bb1d11e308e1450b7c00cf11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangularView &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a84ca526be83387c0d3925e961f238b97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a76f5bc8a03ec105ab4be1f2b91b7b5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::triangular_solve_retval&lt; Side, TriangularView, Other &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a0330b6ef043b921144943127eb750fbc</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a136a6a60e421673ac17e8c4cfd51681b</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TriangularView&lt; Transpose&lt; MatrixType &gt;, TransposeMode &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ac0ea12e12ab30e0fa3381df9ed33290f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TriangularView&lt; Transpose&lt; MatrixType &gt;, TransposeMode &gt;</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>abbbe3565361997478b8cf948dba995ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend TriangularProduct&lt; Mode, false, OtherDerived, OtherDerived::RowsAtCompileTime==1, MatrixType, false &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a5e81b080f2699e72b2ede5bb4b575f6c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const TriangularView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Tridiagonalization</name>
    <filename>classEigen_1_1Tridiagonalization.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>aa96bdbc1b19c647e3372c31301ea4999</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>aeb6c0eb89cc982629305f6c7e0791caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tridiagonalization &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>aa69e607a4aab4fb6321ca6acbf074fc2</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ac109eefddd733d8e82841da5bb2dd8d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoeffVectorType</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a2ab889c75460c178d941ee24e371b206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ad13845d7490115664924b3dc208ec369</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixTReturnType</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>aceb0f16a166f4c236a1b536b7424d292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a66adece364b64b26b3771662de70f2df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubDiagonalReturnType</type>
      <name>subDiagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a8fa49216273ab7579b7bea06debb1e51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a0698ae78b0ab6f239c475b73b9c6bbee</anchor>
      <arglist>(Index size=Size==Dynamic?2:Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>aa9f9722d2cef9425e2c0da3553dfbac7</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Triplet</name>
    <filename>classEigen_1_1Triplet.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>col</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a5c8deff978911c3cfa7d0aeec07d32d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>row</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>aac82d1747008a85ad9b40da9812e7379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>value</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a149ff1275c440f4c880b95d7af07cc6a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::UmfPackLU</name>
    <filename>classEigen_1_1UmfPackLU.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a7e2ed52cc4f9662e04227bd37b31d9e6</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a9d569001e78ea0c1f35d6faeeb00e278</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a0fe09e78951abf0cd6a2b47059cc935a</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a0c06d5c2034ebb329c54235369643ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const internal::solve_retval&lt; UmfPackLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a80935322b92107932d0b90006ef16ecd</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const internal::sparse_solve_retval&lt; UmfPackLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a6c606e11055ed3d815183705c57b22b4</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorBlock</name>
    <filename>classEigen_1_1VectorBlock.html</filename>
    <templarg>VectorType</templarg>
    <templarg>Size</templarg>
    <base>Block&lt; VectorType, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit?1:Size, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit?Size:1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>af312216fff4513d4aa46ada769792333</anchor>
      <arglist>(VectorType &amp;vector, Index start, Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>a7d7aca9ed50dfbbe89514135c8865f5c</anchor>
      <arglist>(VectorType &amp;vector, Index start)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorwiseOp</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <templarg>ExpressionType</templarg>
    <templarg>Direction</templarg>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_all &gt;::Type</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a3535582e42f802aac9b2f02316dbdd38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_any &gt;::Type</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a68ab4a7216ecfeeef6073e3879bd70c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_blueNorm, RealScalar &gt;::Type</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8804de1a54a51b252c394fb07f19d94a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PartialReduxExpr&lt; ExpressionType, internal::member_count&lt; Index &gt;, Direction &gt;</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a554a480bd3ca0f3a0113ecef4153b5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aeaa2c5d72558c2bfc049a098efc25633</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1162b67a2744d546a6d22ecf56f47131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; ExpressionType, Direction &gt;</type>
      <name>homogeneous</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a635f8f9087821d4b3dcebd2997b5f9bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_hypotNorm, RealScalar &gt;::Type</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac478d60f4ed6bbfb0833b704408999d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_maxCoeff &gt;::Type</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae45bc1f13fd426ca7bea74ae4b8f99d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_mean &gt;::Type</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a3edf1e726d7e3f30d6c9655219dffbe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_minCoeff &gt;::Type</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af53dccc8ce1bcbfc641fc5d155e4bfe8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_norm, RealScalar &gt;::Type</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a45bccb7e3e8031ebc99fdc4898a6806c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac0d3937fc9cba6f251995fbd07110216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac154305f4f56b0f78d67c8aa1c52e87e</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abb151c90a593c62a6738e034f9218a23</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ade112b4c47a096790a047b6994d8d982</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af3ddaf5c89daf6fbe41ffb65f91fafdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a146098648dcf02be5c827938e9cfcc2d</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d1e24810f6b86de45a8c2323aeafd19</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9234e61ac3a965ca03ce3a10ec5d2821</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf8e26e47a2eb1a7d71e441a7c6cf455</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a27b68a5f10afab40c9a6b63f0350a557</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_prod &gt;::Type</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a64b778a6e321b207f62530fcc3ed690f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a12ed8da7c7d83cdc68e9cbbde358a164</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const </arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9a078997c488c2d83fbd45108af26e1d</anchor>
      <arglist>(Index factor) const </arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType,(IsVertical?Factor:1),(IsHorizontal?Factor:1)&gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a5a64491d1ee839cf717328f17a1ffc45</anchor>
      <arglist>(Index factor=Factor) const </arglist>
    </member>
    <member kind="function">
      <type>const Reverse&lt; ExpressionType, Direction &gt;</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a04e38b3a68fe5ae6908594f3b1ec618c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_squaredNorm, RealScalar &gt;::Type</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ad56e72700d9ee45893c41533d8c46945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_stableNorm, RealScalar &gt;::Type</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac32ca2926dfc6a21859c0aa9e8eb1bcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType&lt; internal::member_sum &gt;::Type</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af27cb8c9043ed6408e64f94645439362</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::WithFormat</name>
    <filename>classEigen_1_1WithFormat.html</filename>
    <templarg>ExpressionType</templarg>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>notitle</title>
    <filename>index</filename>
  </compound>
</tagfile>
